// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module ntt_intt_pwm_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output ntt_intt_pwm_reg_pkg::ntt_intt_pwm_reg2hw_t reg2hw, // Write
  input  ntt_intt_pwm_reg_pkg::ntt_intt_pwm_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import ntt_intt_pwm_reg_pkg::* ;

  localparam int AW = 11;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] din_0_wd;
  logic din_0_we;
  logic [31:0] din_1_wd;
  logic din_1_we;
  logic [31:0] din_2_wd;
  logic din_2_we;
  logic [31:0] din_3_wd;
  logic din_3_we;
  logic [31:0] din_4_wd;
  logic din_4_we;
  logic [31:0] din_5_wd;
  logic din_5_we;
  logic [31:0] din_6_wd;
  logic din_6_we;
  logic [31:0] din_7_wd;
  logic din_7_we;
  logic [31:0] din_8_wd;
  logic din_8_we;
  logic [31:0] din_9_wd;
  logic din_9_we;
  logic [31:0] din_10_wd;
  logic din_10_we;
  logic [31:0] din_11_wd;
  logic din_11_we;
  logic [31:0] din_12_wd;
  logic din_12_we;
  logic [31:0] din_13_wd;
  logic din_13_we;
  logic [31:0] din_14_wd;
  logic din_14_we;
  logic [31:0] din_15_wd;
  logic din_15_we;
  logic [31:0] din_16_wd;
  logic din_16_we;
  logic [31:0] din_17_wd;
  logic din_17_we;
  logic [31:0] din_18_wd;
  logic din_18_we;
  logic [31:0] din_19_wd;
  logic din_19_we;
  logic [31:0] din_20_wd;
  logic din_20_we;
  logic [31:0] din_21_wd;
  logic din_21_we;
  logic [31:0] din_22_wd;
  logic din_22_we;
  logic [31:0] din_23_wd;
  logic din_23_we;
  logic [31:0] din_24_wd;
  logic din_24_we;
  logic [31:0] din_25_wd;
  logic din_25_we;
  logic [31:0] din_26_wd;
  logic din_26_we;
  logic [31:0] din_27_wd;
  logic din_27_we;
  logic [31:0] din_28_wd;
  logic din_28_we;
  logic [31:0] din_29_wd;
  logic din_29_we;
  logic [31:0] din_30_wd;
  logic din_30_we;
  logic [31:0] din_31_wd;
  logic din_31_we;
  logic [31:0] din_32_wd;
  logic din_32_we;
  logic [31:0] din_33_wd;
  logic din_33_we;
  logic [31:0] din_34_wd;
  logic din_34_we;
  logic [31:0] din_35_wd;
  logic din_35_we;
  logic [31:0] din_36_wd;
  logic din_36_we;
  logic [31:0] din_37_wd;
  logic din_37_we;
  logic [31:0] din_38_wd;
  logic din_38_we;
  logic [31:0] din_39_wd;
  logic din_39_we;
  logic [31:0] din_40_wd;
  logic din_40_we;
  logic [31:0] din_41_wd;
  logic din_41_we;
  logic [31:0] din_42_wd;
  logic din_42_we;
  logic [31:0] din_43_wd;
  logic din_43_we;
  logic [31:0] din_44_wd;
  logic din_44_we;
  logic [31:0] din_45_wd;
  logic din_45_we;
  logic [31:0] din_46_wd;
  logic din_46_we;
  logic [31:0] din_47_wd;
  logic din_47_we;
  logic [31:0] din_48_wd;
  logic din_48_we;
  logic [31:0] din_49_wd;
  logic din_49_we;
  logic [31:0] din_50_wd;
  logic din_50_we;
  logic [31:0] din_51_wd;
  logic din_51_we;
  logic [31:0] din_52_wd;
  logic din_52_we;
  logic [31:0] din_53_wd;
  logic din_53_we;
  logic [31:0] din_54_wd;
  logic din_54_we;
  logic [31:0] din_55_wd;
  logic din_55_we;
  logic [31:0] din_56_wd;
  logic din_56_we;
  logic [31:0] din_57_wd;
  logic din_57_we;
  logic [31:0] din_58_wd;
  logic din_58_we;
  logic [31:0] din_59_wd;
  logic din_59_we;
  logic [31:0] din_60_wd;
  logic din_60_we;
  logic [31:0] din_61_wd;
  logic din_61_we;
  logic [31:0] din_62_wd;
  logic din_62_we;
  logic [31:0] din_63_wd;
  logic din_63_we;
  logic [31:0] din_64_wd;
  logic din_64_we;
  logic [31:0] din_65_wd;
  logic din_65_we;
  logic [31:0] din_66_wd;
  logic din_66_we;
  logic [31:0] din_67_wd;
  logic din_67_we;
  logic [31:0] din_68_wd;
  logic din_68_we;
  logic [31:0] din_69_wd;
  logic din_69_we;
  logic [31:0] din_70_wd;
  logic din_70_we;
  logic [31:0] din_71_wd;
  logic din_71_we;
  logic [31:0] din_72_wd;
  logic din_72_we;
  logic [31:0] din_73_wd;
  logic din_73_we;
  logic [31:0] din_74_wd;
  logic din_74_we;
  logic [31:0] din_75_wd;
  logic din_75_we;
  logic [31:0] din_76_wd;
  logic din_76_we;
  logic [31:0] din_77_wd;
  logic din_77_we;
  logic [31:0] din_78_wd;
  logic din_78_we;
  logic [31:0] din_79_wd;
  logic din_79_we;
  logic [31:0] din_80_wd;
  logic din_80_we;
  logic [31:0] din_81_wd;
  logic din_81_we;
  logic [31:0] din_82_wd;
  logic din_82_we;
  logic [31:0] din_83_wd;
  logic din_83_we;
  logic [31:0] din_84_wd;
  logic din_84_we;
  logic [31:0] din_85_wd;
  logic din_85_we;
  logic [31:0] din_86_wd;
  logic din_86_we;
  logic [31:0] din_87_wd;
  logic din_87_we;
  logic [31:0] din_88_wd;
  logic din_88_we;
  logic [31:0] din_89_wd;
  logic din_89_we;
  logic [31:0] din_90_wd;
  logic din_90_we;
  logic [31:0] din_91_wd;
  logic din_91_we;
  logic [31:0] din_92_wd;
  logic din_92_we;
  logic [31:0] din_93_wd;
  logic din_93_we;
  logic [31:0] din_94_wd;
  logic din_94_we;
  logic [31:0] din_95_wd;
  logic din_95_we;
  logic [31:0] din_96_wd;
  logic din_96_we;
  logic [31:0] din_97_wd;
  logic din_97_we;
  logic [31:0] din_98_wd;
  logic din_98_we;
  logic [31:0] din_99_wd;
  logic din_99_we;
  logic [31:0] din_100_wd;
  logic din_100_we;
  logic [31:0] din_101_wd;
  logic din_101_we;
  logic [31:0] din_102_wd;
  logic din_102_we;
  logic [31:0] din_103_wd;
  logic din_103_we;
  logic [31:0] din_104_wd;
  logic din_104_we;
  logic [31:0] din_105_wd;
  logic din_105_we;
  logic [31:0] din_106_wd;
  logic din_106_we;
  logic [31:0] din_107_wd;
  logic din_107_we;
  logic [31:0] din_108_wd;
  logic din_108_we;
  logic [31:0] din_109_wd;
  logic din_109_we;
  logic [31:0] din_110_wd;
  logic din_110_we;
  logic [31:0] din_111_wd;
  logic din_111_we;
  logic [31:0] din_112_wd;
  logic din_112_we;
  logic [31:0] din_113_wd;
  logic din_113_we;
  logic [31:0] din_114_wd;
  logic din_114_we;
  logic [31:0] din_115_wd;
  logic din_115_we;
  logic [31:0] din_116_wd;
  logic din_116_we;
  logic [31:0] din_117_wd;
  logic din_117_we;
  logic [31:0] din_118_wd;
  logic din_118_we;
  logic [31:0] din_119_wd;
  logic din_119_we;
  logic [31:0] din_120_wd;
  logic din_120_we;
  logic [31:0] din_121_wd;
  logic din_121_we;
  logic [31:0] din_122_wd;
  logic din_122_we;
  logic [31:0] din_123_wd;
  logic din_123_we;
  logic [31:0] din_124_wd;
  logic din_124_we;
  logic [31:0] din_125_wd;
  logic din_125_we;
  logic [31:0] din_126_wd;
  logic din_126_we;
  logic [31:0] din_127_wd;
  logic din_127_we;
  logic [31:0] dout_0_qs;
  logic dout_0_re;
  logic [31:0] dout_1_qs;
  logic dout_1_re;
  logic [31:0] dout_2_qs;
  logic dout_2_re;
  logic [31:0] dout_3_qs;
  logic dout_3_re;
  logic [31:0] dout_4_qs;
  logic dout_4_re;
  logic [31:0] dout_5_qs;
  logic dout_5_re;
  logic [31:0] dout_6_qs;
  logic dout_6_re;
  logic [31:0] dout_7_qs;
  logic dout_7_re;
  logic [31:0] dout_8_qs;
  logic dout_8_re;
  logic [31:0] dout_9_qs;
  logic dout_9_re;
  logic [31:0] dout_10_qs;
  logic dout_10_re;
  logic [31:0] dout_11_qs;
  logic dout_11_re;
  logic [31:0] dout_12_qs;
  logic dout_12_re;
  logic [31:0] dout_13_qs;
  logic dout_13_re;
  logic [31:0] dout_14_qs;
  logic dout_14_re;
  logic [31:0] dout_15_qs;
  logic dout_15_re;
  logic [31:0] dout_16_qs;
  logic dout_16_re;
  logic [31:0] dout_17_qs;
  logic dout_17_re;
  logic [31:0] dout_18_qs;
  logic dout_18_re;
  logic [31:0] dout_19_qs;
  logic dout_19_re;
  logic [31:0] dout_20_qs;
  logic dout_20_re;
  logic [31:0] dout_21_qs;
  logic dout_21_re;
  logic [31:0] dout_22_qs;
  logic dout_22_re;
  logic [31:0] dout_23_qs;
  logic dout_23_re;
  logic [31:0] dout_24_qs;
  logic dout_24_re;
  logic [31:0] dout_25_qs;
  logic dout_25_re;
  logic [31:0] dout_26_qs;
  logic dout_26_re;
  logic [31:0] dout_27_qs;
  logic dout_27_re;
  logic [31:0] dout_28_qs;
  logic dout_28_re;
  logic [31:0] dout_29_qs;
  logic dout_29_re;
  logic [31:0] dout_30_qs;
  logic dout_30_re;
  logic [31:0] dout_31_qs;
  logic dout_31_re;
  logic [31:0] dout_32_qs;
  logic dout_32_re;
  logic [31:0] dout_33_qs;
  logic dout_33_re;
  logic [31:0] dout_34_qs;
  logic dout_34_re;
  logic [31:0] dout_35_qs;
  logic dout_35_re;
  logic [31:0] dout_36_qs;
  logic dout_36_re;
  logic [31:0] dout_37_qs;
  logic dout_37_re;
  logic [31:0] dout_38_qs;
  logic dout_38_re;
  logic [31:0] dout_39_qs;
  logic dout_39_re;
  logic [31:0] dout_40_qs;
  logic dout_40_re;
  logic [31:0] dout_41_qs;
  logic dout_41_re;
  logic [31:0] dout_42_qs;
  logic dout_42_re;
  logic [31:0] dout_43_qs;
  logic dout_43_re;
  logic [31:0] dout_44_qs;
  logic dout_44_re;
  logic [31:0] dout_45_qs;
  logic dout_45_re;
  logic [31:0] dout_46_qs;
  logic dout_46_re;
  logic [31:0] dout_47_qs;
  logic dout_47_re;
  logic [31:0] dout_48_qs;
  logic dout_48_re;
  logic [31:0] dout_49_qs;
  logic dout_49_re;
  logic [31:0] dout_50_qs;
  logic dout_50_re;
  logic [31:0] dout_51_qs;
  logic dout_51_re;
  logic [31:0] dout_52_qs;
  logic dout_52_re;
  logic [31:0] dout_53_qs;
  logic dout_53_re;
  logic [31:0] dout_54_qs;
  logic dout_54_re;
  logic [31:0] dout_55_qs;
  logic dout_55_re;
  logic [31:0] dout_56_qs;
  logic dout_56_re;
  logic [31:0] dout_57_qs;
  logic dout_57_re;
  logic [31:0] dout_58_qs;
  logic dout_58_re;
  logic [31:0] dout_59_qs;
  logic dout_59_re;
  logic [31:0] dout_60_qs;
  logic dout_60_re;
  logic [31:0] dout_61_qs;
  logic dout_61_re;
  logic [31:0] dout_62_qs;
  logic dout_62_re;
  logic [31:0] dout_63_qs;
  logic dout_63_re;
  logic [31:0] dout_64_qs;
  logic dout_64_re;
  logic [31:0] dout_65_qs;
  logic dout_65_re;
  logic [31:0] dout_66_qs;
  logic dout_66_re;
  logic [31:0] dout_67_qs;
  logic dout_67_re;
  logic [31:0] dout_68_qs;
  logic dout_68_re;
  logic [31:0] dout_69_qs;
  logic dout_69_re;
  logic [31:0] dout_70_qs;
  logic dout_70_re;
  logic [31:0] dout_71_qs;
  logic dout_71_re;
  logic [31:0] dout_72_qs;
  logic dout_72_re;
  logic [31:0] dout_73_qs;
  logic dout_73_re;
  logic [31:0] dout_74_qs;
  logic dout_74_re;
  logic [31:0] dout_75_qs;
  logic dout_75_re;
  logic [31:0] dout_76_qs;
  logic dout_76_re;
  logic [31:0] dout_77_qs;
  logic dout_77_re;
  logic [31:0] dout_78_qs;
  logic dout_78_re;
  logic [31:0] dout_79_qs;
  logic dout_79_re;
  logic [31:0] dout_80_qs;
  logic dout_80_re;
  logic [31:0] dout_81_qs;
  logic dout_81_re;
  logic [31:0] dout_82_qs;
  logic dout_82_re;
  logic [31:0] dout_83_qs;
  logic dout_83_re;
  logic [31:0] dout_84_qs;
  logic dout_84_re;
  logic [31:0] dout_85_qs;
  logic dout_85_re;
  logic [31:0] dout_86_qs;
  logic dout_86_re;
  logic [31:0] dout_87_qs;
  logic dout_87_re;
  logic [31:0] dout_88_qs;
  logic dout_88_re;
  logic [31:0] dout_89_qs;
  logic dout_89_re;
  logic [31:0] dout_90_qs;
  logic dout_90_re;
  logic [31:0] dout_91_qs;
  logic dout_91_re;
  logic [31:0] dout_92_qs;
  logic dout_92_re;
  logic [31:0] dout_93_qs;
  logic dout_93_re;
  logic [31:0] dout_94_qs;
  logic dout_94_re;
  logic [31:0] dout_95_qs;
  logic dout_95_re;
  logic [31:0] dout_96_qs;
  logic dout_96_re;
  logic [31:0] dout_97_qs;
  logic dout_97_re;
  logic [31:0] dout_98_qs;
  logic dout_98_re;
  logic [31:0] dout_99_qs;
  logic dout_99_re;
  logic [31:0] dout_100_qs;
  logic dout_100_re;
  logic [31:0] dout_101_qs;
  logic dout_101_re;
  logic [31:0] dout_102_qs;
  logic dout_102_re;
  logic [31:0] dout_103_qs;
  logic dout_103_re;
  logic [31:0] dout_104_qs;
  logic dout_104_re;
  logic [31:0] dout_105_qs;
  logic dout_105_re;
  logic [31:0] dout_106_qs;
  logic dout_106_re;
  logic [31:0] dout_107_qs;
  logic dout_107_re;
  logic [31:0] dout_108_qs;
  logic dout_108_re;
  logic [31:0] dout_109_qs;
  logic dout_109_re;
  logic [31:0] dout_110_qs;
  logic dout_110_re;
  logic [31:0] dout_111_qs;
  logic dout_111_re;
  logic [31:0] dout_112_qs;
  logic dout_112_re;
  logic [31:0] dout_113_qs;
  logic dout_113_re;
  logic [31:0] dout_114_qs;
  logic dout_114_re;
  logic [31:0] dout_115_qs;
  logic dout_115_re;
  logic [31:0] dout_116_qs;
  logic dout_116_re;
  logic [31:0] dout_117_qs;
  logic dout_117_re;
  logic [31:0] dout_118_qs;
  logic dout_118_re;
  logic [31:0] dout_119_qs;
  logic dout_119_re;
  logic [31:0] dout_120_qs;
  logic dout_120_re;
  logic [31:0] dout_121_qs;
  logic dout_121_re;
  logic [31:0] dout_122_qs;
  logic dout_122_re;
  logic [31:0] dout_123_qs;
  logic dout_123_re;
  logic [31:0] dout_124_qs;
  logic dout_124_re;
  logic [31:0] dout_125_qs;
  logic dout_125_re;
  logic [31:0] dout_126_qs;
  logic dout_126_re;
  logic [31:0] dout_127_qs;
  logic dout_127_re;
  logic ctrl_load_a_f_wd;
  logic ctrl_load_a_f_we;
  logic ctrl_load_a_i_wd;
  logic ctrl_load_a_i_we;
  logic ctrl_load_b_f_wd;
  logic ctrl_load_b_f_we;
  logic ctrl_load_b_i_wd;
  logic ctrl_load_b_i_we;
  logic ctrl_read_a_wd;
  logic ctrl_read_a_we;
  logic ctrl_read_b_wd;
  logic ctrl_read_b_we;
  logic ctrl_start_ab_wd;
  logic ctrl_start_ab_we;
  logic ctrl_start_ntt_wd;
  logic ctrl_start_ntt_we;
  logic ctrl_start_pwm_wd;
  logic ctrl_start_pwm_we;
  logic ctrl_start_intt_wd;
  logic ctrl_start_intt_we;
  logic status_qs;
  logic status_re;

  // Register instances

  // Subregister 0 of Multireg din
  // R[din_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_0_we),
    .wd     (din_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg din
  // R[din_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_1_we),
    .wd     (din_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg din
  // R[din_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_2_we),
    .wd     (din_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg din
  // R[din_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_3_we),
    .wd     (din_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg din
  // R[din_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_4_we),
    .wd     (din_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg din
  // R[din_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_5_we),
    .wd     (din_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg din
  // R[din_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_6_we),
    .wd     (din_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg din
  // R[din_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_7_we),
    .wd     (din_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg din
  // R[din_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_8_we),
    .wd     (din_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg din
  // R[din_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_9_we),
    .wd     (din_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg din
  // R[din_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_10_we),
    .wd     (din_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg din
  // R[din_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_11_we),
    .wd     (din_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg din
  // R[din_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_12_we),
    .wd     (din_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg din
  // R[din_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_13_we),
    .wd     (din_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg din
  // R[din_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_14_we),
    .wd     (din_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg din
  // R[din_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_15_we),
    .wd     (din_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[15].q ),

    .qs     ()
  );

  // Subregister 16 of Multireg din
  // R[din_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_16_we),
    .wd     (din_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[16].q ),

    .qs     ()
  );

  // Subregister 17 of Multireg din
  // R[din_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_17_we),
    .wd     (din_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[17].q ),

    .qs     ()
  );

  // Subregister 18 of Multireg din
  // R[din_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_18_we),
    .wd     (din_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[18].q ),

    .qs     ()
  );

  // Subregister 19 of Multireg din
  // R[din_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_19_we),
    .wd     (din_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[19].q ),

    .qs     ()
  );

  // Subregister 20 of Multireg din
  // R[din_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_20_we),
    .wd     (din_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[20].q ),

    .qs     ()
  );

  // Subregister 21 of Multireg din
  // R[din_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_21_we),
    .wd     (din_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[21].q ),

    .qs     ()
  );

  // Subregister 22 of Multireg din
  // R[din_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_22_we),
    .wd     (din_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[22].q ),

    .qs     ()
  );

  // Subregister 23 of Multireg din
  // R[din_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_23_we),
    .wd     (din_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[23].q ),

    .qs     ()
  );

  // Subregister 24 of Multireg din
  // R[din_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_24_we),
    .wd     (din_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[24].q ),

    .qs     ()
  );

  // Subregister 25 of Multireg din
  // R[din_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_25_we),
    .wd     (din_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[25].q ),

    .qs     ()
  );

  // Subregister 26 of Multireg din
  // R[din_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_26_we),
    .wd     (din_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[26].q ),

    .qs     ()
  );

  // Subregister 27 of Multireg din
  // R[din_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_27_we),
    .wd     (din_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[27].q ),

    .qs     ()
  );

  // Subregister 28 of Multireg din
  // R[din_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_28_we),
    .wd     (din_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[28].q ),

    .qs     ()
  );

  // Subregister 29 of Multireg din
  // R[din_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_29_we),
    .wd     (din_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[29].q ),

    .qs     ()
  );

  // Subregister 30 of Multireg din
  // R[din_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_30_we),
    .wd     (din_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[30].q ),

    .qs     ()
  );

  // Subregister 31 of Multireg din
  // R[din_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_31_we),
    .wd     (din_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[31].q ),

    .qs     ()
  );

  // Subregister 32 of Multireg din
  // R[din_32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_32_we),
    .wd     (din_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[32].q ),

    .qs     ()
  );

  // Subregister 33 of Multireg din
  // R[din_33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_33_we),
    .wd     (din_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[33].q ),

    .qs     ()
  );

  // Subregister 34 of Multireg din
  // R[din_34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_34_we),
    .wd     (din_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[34].q ),

    .qs     ()
  );

  // Subregister 35 of Multireg din
  // R[din_35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_35_we),
    .wd     (din_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[35].q ),

    .qs     ()
  );

  // Subregister 36 of Multireg din
  // R[din_36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_36_we),
    .wd     (din_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[36].q ),

    .qs     ()
  );

  // Subregister 37 of Multireg din
  // R[din_37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_37_we),
    .wd     (din_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[37].q ),

    .qs     ()
  );

  // Subregister 38 of Multireg din
  // R[din_38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_38_we),
    .wd     (din_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[38].q ),

    .qs     ()
  );

  // Subregister 39 of Multireg din
  // R[din_39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_39_we),
    .wd     (din_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[39].q ),

    .qs     ()
  );

  // Subregister 40 of Multireg din
  // R[din_40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_40_we),
    .wd     (din_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[40].q ),

    .qs     ()
  );

  // Subregister 41 of Multireg din
  // R[din_41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_41_we),
    .wd     (din_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[41].q ),

    .qs     ()
  );

  // Subregister 42 of Multireg din
  // R[din_42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_42_we),
    .wd     (din_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[42].q ),

    .qs     ()
  );

  // Subregister 43 of Multireg din
  // R[din_43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_43_we),
    .wd     (din_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[43].q ),

    .qs     ()
  );

  // Subregister 44 of Multireg din
  // R[din_44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_44_we),
    .wd     (din_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[44].q ),

    .qs     ()
  );

  // Subregister 45 of Multireg din
  // R[din_45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_45_we),
    .wd     (din_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[45].q ),

    .qs     ()
  );

  // Subregister 46 of Multireg din
  // R[din_46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_46_we),
    .wd     (din_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[46].q ),

    .qs     ()
  );

  // Subregister 47 of Multireg din
  // R[din_47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_47_we),
    .wd     (din_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[47].q ),

    .qs     ()
  );

  // Subregister 48 of Multireg din
  // R[din_48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_48_we),
    .wd     (din_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[48].q ),

    .qs     ()
  );

  // Subregister 49 of Multireg din
  // R[din_49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_49_we),
    .wd     (din_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[49].q ),

    .qs     ()
  );

  // Subregister 50 of Multireg din
  // R[din_50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_50_we),
    .wd     (din_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[50].q ),

    .qs     ()
  );

  // Subregister 51 of Multireg din
  // R[din_51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_51_we),
    .wd     (din_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[51].q ),

    .qs     ()
  );

  // Subregister 52 of Multireg din
  // R[din_52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_52_we),
    .wd     (din_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[52].q ),

    .qs     ()
  );

  // Subregister 53 of Multireg din
  // R[din_53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_53_we),
    .wd     (din_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[53].q ),

    .qs     ()
  );

  // Subregister 54 of Multireg din
  // R[din_54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_54_we),
    .wd     (din_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[54].q ),

    .qs     ()
  );

  // Subregister 55 of Multireg din
  // R[din_55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_55_we),
    .wd     (din_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[55].q ),

    .qs     ()
  );

  // Subregister 56 of Multireg din
  // R[din_56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_56_we),
    .wd     (din_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[56].q ),

    .qs     ()
  );

  // Subregister 57 of Multireg din
  // R[din_57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_57_we),
    .wd     (din_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[57].q ),

    .qs     ()
  );

  // Subregister 58 of Multireg din
  // R[din_58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_58_we),
    .wd     (din_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[58].q ),

    .qs     ()
  );

  // Subregister 59 of Multireg din
  // R[din_59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_59_we),
    .wd     (din_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[59].q ),

    .qs     ()
  );

  // Subregister 60 of Multireg din
  // R[din_60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_60_we),
    .wd     (din_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[60].q ),

    .qs     ()
  );

  // Subregister 61 of Multireg din
  // R[din_61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_61_we),
    .wd     (din_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[61].q ),

    .qs     ()
  );

  // Subregister 62 of Multireg din
  // R[din_62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_62_we),
    .wd     (din_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[62].q ),

    .qs     ()
  );

  // Subregister 63 of Multireg din
  // R[din_63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_63_we),
    .wd     (din_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[63].q ),

    .qs     ()
  );

  // Subregister 64 of Multireg din
  // R[din_64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_64_we),
    .wd     (din_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[64].q ),

    .qs     ()
  );

  // Subregister 65 of Multireg din
  // R[din_65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_65_we),
    .wd     (din_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[65].q ),

    .qs     ()
  );

  // Subregister 66 of Multireg din
  // R[din_66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_66_we),
    .wd     (din_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[66].q ),

    .qs     ()
  );

  // Subregister 67 of Multireg din
  // R[din_67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_67_we),
    .wd     (din_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[67].q ),

    .qs     ()
  );

  // Subregister 68 of Multireg din
  // R[din_68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_68_we),
    .wd     (din_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[68].q ),

    .qs     ()
  );

  // Subregister 69 of Multireg din
  // R[din_69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_69_we),
    .wd     (din_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[69].q ),

    .qs     ()
  );

  // Subregister 70 of Multireg din
  // R[din_70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_70_we),
    .wd     (din_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[70].q ),

    .qs     ()
  );

  // Subregister 71 of Multireg din
  // R[din_71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_71_we),
    .wd     (din_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[71].q ),

    .qs     ()
  );

  // Subregister 72 of Multireg din
  // R[din_72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_72_we),
    .wd     (din_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[72].q ),

    .qs     ()
  );

  // Subregister 73 of Multireg din
  // R[din_73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_73_we),
    .wd     (din_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[73].q ),

    .qs     ()
  );

  // Subregister 74 of Multireg din
  // R[din_74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_74_we),
    .wd     (din_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[74].q ),

    .qs     ()
  );

  // Subregister 75 of Multireg din
  // R[din_75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_75_we),
    .wd     (din_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[75].q ),

    .qs     ()
  );

  // Subregister 76 of Multireg din
  // R[din_76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_76_we),
    .wd     (din_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[76].q ),

    .qs     ()
  );

  // Subregister 77 of Multireg din
  // R[din_77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_77_we),
    .wd     (din_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[77].q ),

    .qs     ()
  );

  // Subregister 78 of Multireg din
  // R[din_78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_78_we),
    .wd     (din_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[78].q ),

    .qs     ()
  );

  // Subregister 79 of Multireg din
  // R[din_79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_79_we),
    .wd     (din_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[79].q ),

    .qs     ()
  );

  // Subregister 80 of Multireg din
  // R[din_80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_80_we),
    .wd     (din_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[80].q ),

    .qs     ()
  );

  // Subregister 81 of Multireg din
  // R[din_81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_81_we),
    .wd     (din_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[81].q ),

    .qs     ()
  );

  // Subregister 82 of Multireg din
  // R[din_82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_82_we),
    .wd     (din_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[82].q ),

    .qs     ()
  );

  // Subregister 83 of Multireg din
  // R[din_83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_83_we),
    .wd     (din_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[83].q ),

    .qs     ()
  );

  // Subregister 84 of Multireg din
  // R[din_84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_84_we),
    .wd     (din_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[84].q ),

    .qs     ()
  );

  // Subregister 85 of Multireg din
  // R[din_85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_85_we),
    .wd     (din_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[85].q ),

    .qs     ()
  );

  // Subregister 86 of Multireg din
  // R[din_86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_86_we),
    .wd     (din_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[86].q ),

    .qs     ()
  );

  // Subregister 87 of Multireg din
  // R[din_87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_87_we),
    .wd     (din_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[87].q ),

    .qs     ()
  );

  // Subregister 88 of Multireg din
  // R[din_88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_88_we),
    .wd     (din_88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[88].q ),

    .qs     ()
  );

  // Subregister 89 of Multireg din
  // R[din_89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_89_we),
    .wd     (din_89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[89].q ),

    .qs     ()
  );

  // Subregister 90 of Multireg din
  // R[din_90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_90_we),
    .wd     (din_90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[90].q ),

    .qs     ()
  );

  // Subregister 91 of Multireg din
  // R[din_91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_91_we),
    .wd     (din_91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[91].q ),

    .qs     ()
  );

  // Subregister 92 of Multireg din
  // R[din_92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_92_we),
    .wd     (din_92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[92].q ),

    .qs     ()
  );

  // Subregister 93 of Multireg din
  // R[din_93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_93_we),
    .wd     (din_93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[93].q ),

    .qs     ()
  );

  // Subregister 94 of Multireg din
  // R[din_94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_94_we),
    .wd     (din_94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[94].q ),

    .qs     ()
  );

  // Subregister 95 of Multireg din
  // R[din_95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_95_we),
    .wd     (din_95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[95].q ),

    .qs     ()
  );

  // Subregister 96 of Multireg din
  // R[din_96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_96_we),
    .wd     (din_96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[96].q ),

    .qs     ()
  );

  // Subregister 97 of Multireg din
  // R[din_97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_97_we),
    .wd     (din_97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[97].q ),

    .qs     ()
  );

  // Subregister 98 of Multireg din
  // R[din_98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_98_we),
    .wd     (din_98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[98].q ),

    .qs     ()
  );

  // Subregister 99 of Multireg din
  // R[din_99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_99_we),
    .wd     (din_99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[99].q ),

    .qs     ()
  );

  // Subregister 100 of Multireg din
  // R[din_100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_100_we),
    .wd     (din_100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[100].q ),

    .qs     ()
  );

  // Subregister 101 of Multireg din
  // R[din_101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_101_we),
    .wd     (din_101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[101].q ),

    .qs     ()
  );

  // Subregister 102 of Multireg din
  // R[din_102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_102_we),
    .wd     (din_102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[102].q ),

    .qs     ()
  );

  // Subregister 103 of Multireg din
  // R[din_103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_103_we),
    .wd     (din_103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[103].q ),

    .qs     ()
  );

  // Subregister 104 of Multireg din
  // R[din_104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_104_we),
    .wd     (din_104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[104].q ),

    .qs     ()
  );

  // Subregister 105 of Multireg din
  // R[din_105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_105_we),
    .wd     (din_105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[105].q ),

    .qs     ()
  );

  // Subregister 106 of Multireg din
  // R[din_106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_106_we),
    .wd     (din_106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[106].q ),

    .qs     ()
  );

  // Subregister 107 of Multireg din
  // R[din_107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_107_we),
    .wd     (din_107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[107].q ),

    .qs     ()
  );

  // Subregister 108 of Multireg din
  // R[din_108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_108_we),
    .wd     (din_108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[108].q ),

    .qs     ()
  );

  // Subregister 109 of Multireg din
  // R[din_109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_109_we),
    .wd     (din_109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[109].q ),

    .qs     ()
  );

  // Subregister 110 of Multireg din
  // R[din_110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_110_we),
    .wd     (din_110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[110].q ),

    .qs     ()
  );

  // Subregister 111 of Multireg din
  // R[din_111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_111_we),
    .wd     (din_111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[111].q ),

    .qs     ()
  );

  // Subregister 112 of Multireg din
  // R[din_112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_112_we),
    .wd     (din_112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[112].q ),

    .qs     ()
  );

  // Subregister 113 of Multireg din
  // R[din_113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_113_we),
    .wd     (din_113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[113].q ),

    .qs     ()
  );

  // Subregister 114 of Multireg din
  // R[din_114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_114_we),
    .wd     (din_114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[114].q ),

    .qs     ()
  );

  // Subregister 115 of Multireg din
  // R[din_115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_115_we),
    .wd     (din_115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[115].q ),

    .qs     ()
  );

  // Subregister 116 of Multireg din
  // R[din_116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_116_we),
    .wd     (din_116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[116].q ),

    .qs     ()
  );

  // Subregister 117 of Multireg din
  // R[din_117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_117_we),
    .wd     (din_117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[117].q ),

    .qs     ()
  );

  // Subregister 118 of Multireg din
  // R[din_118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_118_we),
    .wd     (din_118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[118].q ),

    .qs     ()
  );

  // Subregister 119 of Multireg din
  // R[din_119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_119_we),
    .wd     (din_119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[119].q ),

    .qs     ()
  );

  // Subregister 120 of Multireg din
  // R[din_120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_120_we),
    .wd     (din_120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[120].q ),

    .qs     ()
  );

  // Subregister 121 of Multireg din
  // R[din_121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_121_we),
    .wd     (din_121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[121].q ),

    .qs     ()
  );

  // Subregister 122 of Multireg din
  // R[din_122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_122_we),
    .wd     (din_122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[122].q ),

    .qs     ()
  );

  // Subregister 123 of Multireg din
  // R[din_123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_123_we),
    .wd     (din_123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[123].q ),

    .qs     ()
  );

  // Subregister 124 of Multireg din
  // R[din_124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_124_we),
    .wd     (din_124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[124].q ),

    .qs     ()
  );

  // Subregister 125 of Multireg din
  // R[din_125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_125_we),
    .wd     (din_125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[125].q ),

    .qs     ()
  );

  // Subregister 126 of Multireg din
  // R[din_126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_126_we),
    .wd     (din_126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[126].q ),

    .qs     ()
  );

  // Subregister 127 of Multireg din
  // R[din_127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_din_127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_127_we),
    .wd     (din_127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din[127].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg dout
  // R[dout_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_0 (
    .re     (dout_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_0_qs)
  );

  // Subregister 1 of Multireg dout
  // R[dout_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_1 (
    .re     (dout_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_1_qs)
  );

  // Subregister 2 of Multireg dout
  // R[dout_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_2 (
    .re     (dout_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_2_qs)
  );

  // Subregister 3 of Multireg dout
  // R[dout_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_3 (
    .re     (dout_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_3_qs)
  );

  // Subregister 4 of Multireg dout
  // R[dout_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_4 (
    .re     (dout_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_4_qs)
  );

  // Subregister 5 of Multireg dout
  // R[dout_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_5 (
    .re     (dout_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_5_qs)
  );

  // Subregister 6 of Multireg dout
  // R[dout_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_6 (
    .re     (dout_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_6_qs)
  );

  // Subregister 7 of Multireg dout
  // R[dout_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_7 (
    .re     (dout_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_7_qs)
  );

  // Subregister 8 of Multireg dout
  // R[dout_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_8 (
    .re     (dout_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_8_qs)
  );

  // Subregister 9 of Multireg dout
  // R[dout_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_9 (
    .re     (dout_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_9_qs)
  );

  // Subregister 10 of Multireg dout
  // R[dout_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_10 (
    .re     (dout_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_10_qs)
  );

  // Subregister 11 of Multireg dout
  // R[dout_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_11 (
    .re     (dout_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_11_qs)
  );

  // Subregister 12 of Multireg dout
  // R[dout_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_12 (
    .re     (dout_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_12_qs)
  );

  // Subregister 13 of Multireg dout
  // R[dout_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_13 (
    .re     (dout_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_13_qs)
  );

  // Subregister 14 of Multireg dout
  // R[dout_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_14 (
    .re     (dout_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_14_qs)
  );

  // Subregister 15 of Multireg dout
  // R[dout_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_15 (
    .re     (dout_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_15_qs)
  );

  // Subregister 16 of Multireg dout
  // R[dout_16]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_16 (
    .re     (dout_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_16_qs)
  );

  // Subregister 17 of Multireg dout
  // R[dout_17]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_17 (
    .re     (dout_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_17_qs)
  );

  // Subregister 18 of Multireg dout
  // R[dout_18]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_18 (
    .re     (dout_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_18_qs)
  );

  // Subregister 19 of Multireg dout
  // R[dout_19]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_19 (
    .re     (dout_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_19_qs)
  );

  // Subregister 20 of Multireg dout
  // R[dout_20]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_20 (
    .re     (dout_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_20_qs)
  );

  // Subregister 21 of Multireg dout
  // R[dout_21]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_21 (
    .re     (dout_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_21_qs)
  );

  // Subregister 22 of Multireg dout
  // R[dout_22]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_22 (
    .re     (dout_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_22_qs)
  );

  // Subregister 23 of Multireg dout
  // R[dout_23]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_23 (
    .re     (dout_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_23_qs)
  );

  // Subregister 24 of Multireg dout
  // R[dout_24]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_24 (
    .re     (dout_24_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[24].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_24_qs)
  );

  // Subregister 25 of Multireg dout
  // R[dout_25]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_25 (
    .re     (dout_25_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[25].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_25_qs)
  );

  // Subregister 26 of Multireg dout
  // R[dout_26]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_26 (
    .re     (dout_26_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[26].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_26_qs)
  );

  // Subregister 27 of Multireg dout
  // R[dout_27]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_27 (
    .re     (dout_27_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[27].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_27_qs)
  );

  // Subregister 28 of Multireg dout
  // R[dout_28]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_28 (
    .re     (dout_28_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[28].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_28_qs)
  );

  // Subregister 29 of Multireg dout
  // R[dout_29]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_29 (
    .re     (dout_29_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[29].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_29_qs)
  );

  // Subregister 30 of Multireg dout
  // R[dout_30]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_30 (
    .re     (dout_30_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[30].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_30_qs)
  );

  // Subregister 31 of Multireg dout
  // R[dout_31]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_31 (
    .re     (dout_31_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[31].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_31_qs)
  );

  // Subregister 32 of Multireg dout
  // R[dout_32]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_32 (
    .re     (dout_32_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[32].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_32_qs)
  );

  // Subregister 33 of Multireg dout
  // R[dout_33]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_33 (
    .re     (dout_33_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[33].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_33_qs)
  );

  // Subregister 34 of Multireg dout
  // R[dout_34]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_34 (
    .re     (dout_34_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[34].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_34_qs)
  );

  // Subregister 35 of Multireg dout
  // R[dout_35]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_35 (
    .re     (dout_35_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[35].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_35_qs)
  );

  // Subregister 36 of Multireg dout
  // R[dout_36]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_36 (
    .re     (dout_36_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[36].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_36_qs)
  );

  // Subregister 37 of Multireg dout
  // R[dout_37]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_37 (
    .re     (dout_37_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[37].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_37_qs)
  );

  // Subregister 38 of Multireg dout
  // R[dout_38]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_38 (
    .re     (dout_38_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[38].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_38_qs)
  );

  // Subregister 39 of Multireg dout
  // R[dout_39]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_39 (
    .re     (dout_39_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[39].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_39_qs)
  );

  // Subregister 40 of Multireg dout
  // R[dout_40]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_40 (
    .re     (dout_40_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[40].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_40_qs)
  );

  // Subregister 41 of Multireg dout
  // R[dout_41]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_41 (
    .re     (dout_41_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[41].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_41_qs)
  );

  // Subregister 42 of Multireg dout
  // R[dout_42]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_42 (
    .re     (dout_42_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[42].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_42_qs)
  );

  // Subregister 43 of Multireg dout
  // R[dout_43]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_43 (
    .re     (dout_43_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[43].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_43_qs)
  );

  // Subregister 44 of Multireg dout
  // R[dout_44]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_44 (
    .re     (dout_44_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[44].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_44_qs)
  );

  // Subregister 45 of Multireg dout
  // R[dout_45]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_45 (
    .re     (dout_45_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[45].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_45_qs)
  );

  // Subregister 46 of Multireg dout
  // R[dout_46]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_46 (
    .re     (dout_46_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[46].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_46_qs)
  );

  // Subregister 47 of Multireg dout
  // R[dout_47]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_47 (
    .re     (dout_47_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[47].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_47_qs)
  );

  // Subregister 48 of Multireg dout
  // R[dout_48]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_48 (
    .re     (dout_48_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[48].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_48_qs)
  );

  // Subregister 49 of Multireg dout
  // R[dout_49]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_49 (
    .re     (dout_49_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[49].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_49_qs)
  );

  // Subregister 50 of Multireg dout
  // R[dout_50]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_50 (
    .re     (dout_50_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[50].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_50_qs)
  );

  // Subregister 51 of Multireg dout
  // R[dout_51]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_51 (
    .re     (dout_51_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[51].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_51_qs)
  );

  // Subregister 52 of Multireg dout
  // R[dout_52]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_52 (
    .re     (dout_52_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[52].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_52_qs)
  );

  // Subregister 53 of Multireg dout
  // R[dout_53]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_53 (
    .re     (dout_53_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[53].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_53_qs)
  );

  // Subregister 54 of Multireg dout
  // R[dout_54]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_54 (
    .re     (dout_54_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[54].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_54_qs)
  );

  // Subregister 55 of Multireg dout
  // R[dout_55]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_55 (
    .re     (dout_55_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[55].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_55_qs)
  );

  // Subregister 56 of Multireg dout
  // R[dout_56]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_56 (
    .re     (dout_56_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[56].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_56_qs)
  );

  // Subregister 57 of Multireg dout
  // R[dout_57]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_57 (
    .re     (dout_57_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[57].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_57_qs)
  );

  // Subregister 58 of Multireg dout
  // R[dout_58]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_58 (
    .re     (dout_58_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[58].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_58_qs)
  );

  // Subregister 59 of Multireg dout
  // R[dout_59]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_59 (
    .re     (dout_59_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[59].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_59_qs)
  );

  // Subregister 60 of Multireg dout
  // R[dout_60]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_60 (
    .re     (dout_60_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[60].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_60_qs)
  );

  // Subregister 61 of Multireg dout
  // R[dout_61]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_61 (
    .re     (dout_61_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[61].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_61_qs)
  );

  // Subregister 62 of Multireg dout
  // R[dout_62]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_62 (
    .re     (dout_62_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[62].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_62_qs)
  );

  // Subregister 63 of Multireg dout
  // R[dout_63]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_63 (
    .re     (dout_63_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[63].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_63_qs)
  );

  // Subregister 64 of Multireg dout
  // R[dout_64]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_64 (
    .re     (dout_64_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[64].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_64_qs)
  );

  // Subregister 65 of Multireg dout
  // R[dout_65]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_65 (
    .re     (dout_65_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[65].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_65_qs)
  );

  // Subregister 66 of Multireg dout
  // R[dout_66]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_66 (
    .re     (dout_66_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[66].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_66_qs)
  );

  // Subregister 67 of Multireg dout
  // R[dout_67]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_67 (
    .re     (dout_67_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[67].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_67_qs)
  );

  // Subregister 68 of Multireg dout
  // R[dout_68]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_68 (
    .re     (dout_68_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[68].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_68_qs)
  );

  // Subregister 69 of Multireg dout
  // R[dout_69]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_69 (
    .re     (dout_69_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[69].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_69_qs)
  );

  // Subregister 70 of Multireg dout
  // R[dout_70]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_70 (
    .re     (dout_70_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[70].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_70_qs)
  );

  // Subregister 71 of Multireg dout
  // R[dout_71]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_71 (
    .re     (dout_71_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[71].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_71_qs)
  );

  // Subregister 72 of Multireg dout
  // R[dout_72]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_72 (
    .re     (dout_72_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[72].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_72_qs)
  );

  // Subregister 73 of Multireg dout
  // R[dout_73]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_73 (
    .re     (dout_73_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[73].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_73_qs)
  );

  // Subregister 74 of Multireg dout
  // R[dout_74]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_74 (
    .re     (dout_74_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[74].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_74_qs)
  );

  // Subregister 75 of Multireg dout
  // R[dout_75]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_75 (
    .re     (dout_75_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[75].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_75_qs)
  );

  // Subregister 76 of Multireg dout
  // R[dout_76]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_76 (
    .re     (dout_76_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[76].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_76_qs)
  );

  // Subregister 77 of Multireg dout
  // R[dout_77]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_77 (
    .re     (dout_77_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[77].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_77_qs)
  );

  // Subregister 78 of Multireg dout
  // R[dout_78]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_78 (
    .re     (dout_78_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[78].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_78_qs)
  );

  // Subregister 79 of Multireg dout
  // R[dout_79]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_79 (
    .re     (dout_79_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[79].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_79_qs)
  );

  // Subregister 80 of Multireg dout
  // R[dout_80]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_80 (
    .re     (dout_80_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[80].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_80_qs)
  );

  // Subregister 81 of Multireg dout
  // R[dout_81]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_81 (
    .re     (dout_81_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[81].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_81_qs)
  );

  // Subregister 82 of Multireg dout
  // R[dout_82]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_82 (
    .re     (dout_82_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[82].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_82_qs)
  );

  // Subregister 83 of Multireg dout
  // R[dout_83]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_83 (
    .re     (dout_83_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[83].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_83_qs)
  );

  // Subregister 84 of Multireg dout
  // R[dout_84]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_84 (
    .re     (dout_84_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[84].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_84_qs)
  );

  // Subregister 85 of Multireg dout
  // R[dout_85]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_85 (
    .re     (dout_85_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[85].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_85_qs)
  );

  // Subregister 86 of Multireg dout
  // R[dout_86]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_86 (
    .re     (dout_86_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[86].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_86_qs)
  );

  // Subregister 87 of Multireg dout
  // R[dout_87]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_87 (
    .re     (dout_87_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[87].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_87_qs)
  );

  // Subregister 88 of Multireg dout
  // R[dout_88]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_88 (
    .re     (dout_88_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[88].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_88_qs)
  );

  // Subregister 89 of Multireg dout
  // R[dout_89]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_89 (
    .re     (dout_89_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[89].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_89_qs)
  );

  // Subregister 90 of Multireg dout
  // R[dout_90]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_90 (
    .re     (dout_90_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[90].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_90_qs)
  );

  // Subregister 91 of Multireg dout
  // R[dout_91]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_91 (
    .re     (dout_91_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[91].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_91_qs)
  );

  // Subregister 92 of Multireg dout
  // R[dout_92]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_92 (
    .re     (dout_92_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[92].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_92_qs)
  );

  // Subregister 93 of Multireg dout
  // R[dout_93]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_93 (
    .re     (dout_93_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[93].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_93_qs)
  );

  // Subregister 94 of Multireg dout
  // R[dout_94]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_94 (
    .re     (dout_94_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[94].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_94_qs)
  );

  // Subregister 95 of Multireg dout
  // R[dout_95]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_95 (
    .re     (dout_95_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[95].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_95_qs)
  );

  // Subregister 96 of Multireg dout
  // R[dout_96]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_96 (
    .re     (dout_96_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[96].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_96_qs)
  );

  // Subregister 97 of Multireg dout
  // R[dout_97]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_97 (
    .re     (dout_97_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[97].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_97_qs)
  );

  // Subregister 98 of Multireg dout
  // R[dout_98]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_98 (
    .re     (dout_98_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[98].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_98_qs)
  );

  // Subregister 99 of Multireg dout
  // R[dout_99]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_99 (
    .re     (dout_99_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[99].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_99_qs)
  );

  // Subregister 100 of Multireg dout
  // R[dout_100]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_100 (
    .re     (dout_100_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[100].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_100_qs)
  );

  // Subregister 101 of Multireg dout
  // R[dout_101]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_101 (
    .re     (dout_101_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[101].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_101_qs)
  );

  // Subregister 102 of Multireg dout
  // R[dout_102]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_102 (
    .re     (dout_102_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[102].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_102_qs)
  );

  // Subregister 103 of Multireg dout
  // R[dout_103]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_103 (
    .re     (dout_103_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[103].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_103_qs)
  );

  // Subregister 104 of Multireg dout
  // R[dout_104]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_104 (
    .re     (dout_104_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[104].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_104_qs)
  );

  // Subregister 105 of Multireg dout
  // R[dout_105]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_105 (
    .re     (dout_105_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[105].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_105_qs)
  );

  // Subregister 106 of Multireg dout
  // R[dout_106]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_106 (
    .re     (dout_106_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[106].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_106_qs)
  );

  // Subregister 107 of Multireg dout
  // R[dout_107]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_107 (
    .re     (dout_107_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[107].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_107_qs)
  );

  // Subregister 108 of Multireg dout
  // R[dout_108]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_108 (
    .re     (dout_108_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[108].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_108_qs)
  );

  // Subregister 109 of Multireg dout
  // R[dout_109]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_109 (
    .re     (dout_109_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[109].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_109_qs)
  );

  // Subregister 110 of Multireg dout
  // R[dout_110]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_110 (
    .re     (dout_110_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[110].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_110_qs)
  );

  // Subregister 111 of Multireg dout
  // R[dout_111]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_111 (
    .re     (dout_111_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[111].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_111_qs)
  );

  // Subregister 112 of Multireg dout
  // R[dout_112]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_112 (
    .re     (dout_112_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[112].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_112_qs)
  );

  // Subregister 113 of Multireg dout
  // R[dout_113]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_113 (
    .re     (dout_113_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[113].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_113_qs)
  );

  // Subregister 114 of Multireg dout
  // R[dout_114]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_114 (
    .re     (dout_114_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[114].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_114_qs)
  );

  // Subregister 115 of Multireg dout
  // R[dout_115]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_115 (
    .re     (dout_115_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[115].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_115_qs)
  );

  // Subregister 116 of Multireg dout
  // R[dout_116]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_116 (
    .re     (dout_116_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[116].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_116_qs)
  );

  // Subregister 117 of Multireg dout
  // R[dout_117]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_117 (
    .re     (dout_117_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[117].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_117_qs)
  );

  // Subregister 118 of Multireg dout
  // R[dout_118]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_118 (
    .re     (dout_118_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[118].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_118_qs)
  );

  // Subregister 119 of Multireg dout
  // R[dout_119]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_119 (
    .re     (dout_119_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[119].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_119_qs)
  );

  // Subregister 120 of Multireg dout
  // R[dout_120]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_120 (
    .re     (dout_120_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[120].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_120_qs)
  );

  // Subregister 121 of Multireg dout
  // R[dout_121]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_121 (
    .re     (dout_121_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[121].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_121_qs)
  );

  // Subregister 122 of Multireg dout
  // R[dout_122]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_122 (
    .re     (dout_122_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[122].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_122_qs)
  );

  // Subregister 123 of Multireg dout
  // R[dout_123]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_123 (
    .re     (dout_123_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[123].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_123_qs)
  );

  // Subregister 124 of Multireg dout
  // R[dout_124]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_124 (
    .re     (dout_124_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[124].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_124_qs)
  );

  // Subregister 125 of Multireg dout
  // R[dout_125]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_125 (
    .re     (dout_125_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[125].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_125_qs)
  );

  // Subregister 126 of Multireg dout
  // R[dout_126]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_126 (
    .re     (dout_126_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[126].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_126_qs)
  );

  // Subregister 127 of Multireg dout
  // R[dout_127]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_dout_127 (
    .re     (dout_127_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.dout[127].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (dout_127_qs)
  );


  // R[ctrl]: V(True)

  //   F[load_a_f]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_load_a_f (
    .re     (1'b0),
    .we     (ctrl_load_a_f_we),
    .wd     (ctrl_load_a_f_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.load_a_f.qe),
    .q      (reg2hw.ctrl.load_a_f.q ),
    .qs     ()
  );


  //   F[load_a_i]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_load_a_i (
    .re     (1'b0),
    .we     (ctrl_load_a_i_we),
    .wd     (ctrl_load_a_i_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.load_a_i.qe),
    .q      (reg2hw.ctrl.load_a_i.q ),
    .qs     ()
  );


  //   F[load_b_f]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_load_b_f (
    .re     (1'b0),
    .we     (ctrl_load_b_f_we),
    .wd     (ctrl_load_b_f_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.load_b_f.qe),
    .q      (reg2hw.ctrl.load_b_f.q ),
    .qs     ()
  );


  //   F[load_b_i]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_load_b_i (
    .re     (1'b0),
    .we     (ctrl_load_b_i_we),
    .wd     (ctrl_load_b_i_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.load_b_i.qe),
    .q      (reg2hw.ctrl.load_b_i.q ),
    .qs     ()
  );


  //   F[read_a]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_read_a (
    .re     (1'b0),
    .we     (ctrl_read_a_we),
    .wd     (ctrl_read_a_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.read_a.qe),
    .q      (reg2hw.ctrl.read_a.q ),
    .qs     ()
  );


  //   F[read_b]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_read_b (
    .re     (1'b0),
    .we     (ctrl_read_b_we),
    .wd     (ctrl_read_b_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.read_b.qe),
    .q      (reg2hw.ctrl.read_b.q ),
    .qs     ()
  );


  //   F[start_ab]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_start_ab (
    .re     (1'b0),
    .we     (ctrl_start_ab_we),
    .wd     (ctrl_start_ab_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.start_ab.qe),
    .q      (reg2hw.ctrl.start_ab.q ),
    .qs     ()
  );


  //   F[start_ntt]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_start_ntt (
    .re     (1'b0),
    .we     (ctrl_start_ntt_we),
    .wd     (ctrl_start_ntt_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.start_ntt.qe),
    .q      (reg2hw.ctrl.start_ntt.q ),
    .qs     ()
  );


  //   F[start_pwm]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_start_pwm (
    .re     (1'b0),
    .we     (ctrl_start_pwm_we),
    .wd     (ctrl_start_pwm_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.start_pwm.qe),
    .q      (reg2hw.ctrl.start_pwm.q ),
    .qs     ()
  );


  //   F[start_intt]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_start_intt (
    .re     (1'b0),
    .we     (ctrl_start_intt_we),
    .wd     (ctrl_start_intt_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.start_intt.qe),
    .q      (reg2hw.ctrl.start_intt.q ),
    .qs     ()
  );


  // R[status]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_status (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_qs)
  );




  logic [257:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == NTT_INTT_PWM_DIN_0_OFFSET);
    addr_hit[  1] = (reg_addr == NTT_INTT_PWM_DIN_1_OFFSET);
    addr_hit[  2] = (reg_addr == NTT_INTT_PWM_DIN_2_OFFSET);
    addr_hit[  3] = (reg_addr == NTT_INTT_PWM_DIN_3_OFFSET);
    addr_hit[  4] = (reg_addr == NTT_INTT_PWM_DIN_4_OFFSET);
    addr_hit[  5] = (reg_addr == NTT_INTT_PWM_DIN_5_OFFSET);
    addr_hit[  6] = (reg_addr == NTT_INTT_PWM_DIN_6_OFFSET);
    addr_hit[  7] = (reg_addr == NTT_INTT_PWM_DIN_7_OFFSET);
    addr_hit[  8] = (reg_addr == NTT_INTT_PWM_DIN_8_OFFSET);
    addr_hit[  9] = (reg_addr == NTT_INTT_PWM_DIN_9_OFFSET);
    addr_hit[ 10] = (reg_addr == NTT_INTT_PWM_DIN_10_OFFSET);
    addr_hit[ 11] = (reg_addr == NTT_INTT_PWM_DIN_11_OFFSET);
    addr_hit[ 12] = (reg_addr == NTT_INTT_PWM_DIN_12_OFFSET);
    addr_hit[ 13] = (reg_addr == NTT_INTT_PWM_DIN_13_OFFSET);
    addr_hit[ 14] = (reg_addr == NTT_INTT_PWM_DIN_14_OFFSET);
    addr_hit[ 15] = (reg_addr == NTT_INTT_PWM_DIN_15_OFFSET);
    addr_hit[ 16] = (reg_addr == NTT_INTT_PWM_DIN_16_OFFSET);
    addr_hit[ 17] = (reg_addr == NTT_INTT_PWM_DIN_17_OFFSET);
    addr_hit[ 18] = (reg_addr == NTT_INTT_PWM_DIN_18_OFFSET);
    addr_hit[ 19] = (reg_addr == NTT_INTT_PWM_DIN_19_OFFSET);
    addr_hit[ 20] = (reg_addr == NTT_INTT_PWM_DIN_20_OFFSET);
    addr_hit[ 21] = (reg_addr == NTT_INTT_PWM_DIN_21_OFFSET);
    addr_hit[ 22] = (reg_addr == NTT_INTT_PWM_DIN_22_OFFSET);
    addr_hit[ 23] = (reg_addr == NTT_INTT_PWM_DIN_23_OFFSET);
    addr_hit[ 24] = (reg_addr == NTT_INTT_PWM_DIN_24_OFFSET);
    addr_hit[ 25] = (reg_addr == NTT_INTT_PWM_DIN_25_OFFSET);
    addr_hit[ 26] = (reg_addr == NTT_INTT_PWM_DIN_26_OFFSET);
    addr_hit[ 27] = (reg_addr == NTT_INTT_PWM_DIN_27_OFFSET);
    addr_hit[ 28] = (reg_addr == NTT_INTT_PWM_DIN_28_OFFSET);
    addr_hit[ 29] = (reg_addr == NTT_INTT_PWM_DIN_29_OFFSET);
    addr_hit[ 30] = (reg_addr == NTT_INTT_PWM_DIN_30_OFFSET);
    addr_hit[ 31] = (reg_addr == NTT_INTT_PWM_DIN_31_OFFSET);
    addr_hit[ 32] = (reg_addr == NTT_INTT_PWM_DIN_32_OFFSET);
    addr_hit[ 33] = (reg_addr == NTT_INTT_PWM_DIN_33_OFFSET);
    addr_hit[ 34] = (reg_addr == NTT_INTT_PWM_DIN_34_OFFSET);
    addr_hit[ 35] = (reg_addr == NTT_INTT_PWM_DIN_35_OFFSET);
    addr_hit[ 36] = (reg_addr == NTT_INTT_PWM_DIN_36_OFFSET);
    addr_hit[ 37] = (reg_addr == NTT_INTT_PWM_DIN_37_OFFSET);
    addr_hit[ 38] = (reg_addr == NTT_INTT_PWM_DIN_38_OFFSET);
    addr_hit[ 39] = (reg_addr == NTT_INTT_PWM_DIN_39_OFFSET);
    addr_hit[ 40] = (reg_addr == NTT_INTT_PWM_DIN_40_OFFSET);
    addr_hit[ 41] = (reg_addr == NTT_INTT_PWM_DIN_41_OFFSET);
    addr_hit[ 42] = (reg_addr == NTT_INTT_PWM_DIN_42_OFFSET);
    addr_hit[ 43] = (reg_addr == NTT_INTT_PWM_DIN_43_OFFSET);
    addr_hit[ 44] = (reg_addr == NTT_INTT_PWM_DIN_44_OFFSET);
    addr_hit[ 45] = (reg_addr == NTT_INTT_PWM_DIN_45_OFFSET);
    addr_hit[ 46] = (reg_addr == NTT_INTT_PWM_DIN_46_OFFSET);
    addr_hit[ 47] = (reg_addr == NTT_INTT_PWM_DIN_47_OFFSET);
    addr_hit[ 48] = (reg_addr == NTT_INTT_PWM_DIN_48_OFFSET);
    addr_hit[ 49] = (reg_addr == NTT_INTT_PWM_DIN_49_OFFSET);
    addr_hit[ 50] = (reg_addr == NTT_INTT_PWM_DIN_50_OFFSET);
    addr_hit[ 51] = (reg_addr == NTT_INTT_PWM_DIN_51_OFFSET);
    addr_hit[ 52] = (reg_addr == NTT_INTT_PWM_DIN_52_OFFSET);
    addr_hit[ 53] = (reg_addr == NTT_INTT_PWM_DIN_53_OFFSET);
    addr_hit[ 54] = (reg_addr == NTT_INTT_PWM_DIN_54_OFFSET);
    addr_hit[ 55] = (reg_addr == NTT_INTT_PWM_DIN_55_OFFSET);
    addr_hit[ 56] = (reg_addr == NTT_INTT_PWM_DIN_56_OFFSET);
    addr_hit[ 57] = (reg_addr == NTT_INTT_PWM_DIN_57_OFFSET);
    addr_hit[ 58] = (reg_addr == NTT_INTT_PWM_DIN_58_OFFSET);
    addr_hit[ 59] = (reg_addr == NTT_INTT_PWM_DIN_59_OFFSET);
    addr_hit[ 60] = (reg_addr == NTT_INTT_PWM_DIN_60_OFFSET);
    addr_hit[ 61] = (reg_addr == NTT_INTT_PWM_DIN_61_OFFSET);
    addr_hit[ 62] = (reg_addr == NTT_INTT_PWM_DIN_62_OFFSET);
    addr_hit[ 63] = (reg_addr == NTT_INTT_PWM_DIN_63_OFFSET);
    addr_hit[ 64] = (reg_addr == NTT_INTT_PWM_DIN_64_OFFSET);
    addr_hit[ 65] = (reg_addr == NTT_INTT_PWM_DIN_65_OFFSET);
    addr_hit[ 66] = (reg_addr == NTT_INTT_PWM_DIN_66_OFFSET);
    addr_hit[ 67] = (reg_addr == NTT_INTT_PWM_DIN_67_OFFSET);
    addr_hit[ 68] = (reg_addr == NTT_INTT_PWM_DIN_68_OFFSET);
    addr_hit[ 69] = (reg_addr == NTT_INTT_PWM_DIN_69_OFFSET);
    addr_hit[ 70] = (reg_addr == NTT_INTT_PWM_DIN_70_OFFSET);
    addr_hit[ 71] = (reg_addr == NTT_INTT_PWM_DIN_71_OFFSET);
    addr_hit[ 72] = (reg_addr == NTT_INTT_PWM_DIN_72_OFFSET);
    addr_hit[ 73] = (reg_addr == NTT_INTT_PWM_DIN_73_OFFSET);
    addr_hit[ 74] = (reg_addr == NTT_INTT_PWM_DIN_74_OFFSET);
    addr_hit[ 75] = (reg_addr == NTT_INTT_PWM_DIN_75_OFFSET);
    addr_hit[ 76] = (reg_addr == NTT_INTT_PWM_DIN_76_OFFSET);
    addr_hit[ 77] = (reg_addr == NTT_INTT_PWM_DIN_77_OFFSET);
    addr_hit[ 78] = (reg_addr == NTT_INTT_PWM_DIN_78_OFFSET);
    addr_hit[ 79] = (reg_addr == NTT_INTT_PWM_DIN_79_OFFSET);
    addr_hit[ 80] = (reg_addr == NTT_INTT_PWM_DIN_80_OFFSET);
    addr_hit[ 81] = (reg_addr == NTT_INTT_PWM_DIN_81_OFFSET);
    addr_hit[ 82] = (reg_addr == NTT_INTT_PWM_DIN_82_OFFSET);
    addr_hit[ 83] = (reg_addr == NTT_INTT_PWM_DIN_83_OFFSET);
    addr_hit[ 84] = (reg_addr == NTT_INTT_PWM_DIN_84_OFFSET);
    addr_hit[ 85] = (reg_addr == NTT_INTT_PWM_DIN_85_OFFSET);
    addr_hit[ 86] = (reg_addr == NTT_INTT_PWM_DIN_86_OFFSET);
    addr_hit[ 87] = (reg_addr == NTT_INTT_PWM_DIN_87_OFFSET);
    addr_hit[ 88] = (reg_addr == NTT_INTT_PWM_DIN_88_OFFSET);
    addr_hit[ 89] = (reg_addr == NTT_INTT_PWM_DIN_89_OFFSET);
    addr_hit[ 90] = (reg_addr == NTT_INTT_PWM_DIN_90_OFFSET);
    addr_hit[ 91] = (reg_addr == NTT_INTT_PWM_DIN_91_OFFSET);
    addr_hit[ 92] = (reg_addr == NTT_INTT_PWM_DIN_92_OFFSET);
    addr_hit[ 93] = (reg_addr == NTT_INTT_PWM_DIN_93_OFFSET);
    addr_hit[ 94] = (reg_addr == NTT_INTT_PWM_DIN_94_OFFSET);
    addr_hit[ 95] = (reg_addr == NTT_INTT_PWM_DIN_95_OFFSET);
    addr_hit[ 96] = (reg_addr == NTT_INTT_PWM_DIN_96_OFFSET);
    addr_hit[ 97] = (reg_addr == NTT_INTT_PWM_DIN_97_OFFSET);
    addr_hit[ 98] = (reg_addr == NTT_INTT_PWM_DIN_98_OFFSET);
    addr_hit[ 99] = (reg_addr == NTT_INTT_PWM_DIN_99_OFFSET);
    addr_hit[100] = (reg_addr == NTT_INTT_PWM_DIN_100_OFFSET);
    addr_hit[101] = (reg_addr == NTT_INTT_PWM_DIN_101_OFFSET);
    addr_hit[102] = (reg_addr == NTT_INTT_PWM_DIN_102_OFFSET);
    addr_hit[103] = (reg_addr == NTT_INTT_PWM_DIN_103_OFFSET);
    addr_hit[104] = (reg_addr == NTT_INTT_PWM_DIN_104_OFFSET);
    addr_hit[105] = (reg_addr == NTT_INTT_PWM_DIN_105_OFFSET);
    addr_hit[106] = (reg_addr == NTT_INTT_PWM_DIN_106_OFFSET);
    addr_hit[107] = (reg_addr == NTT_INTT_PWM_DIN_107_OFFSET);
    addr_hit[108] = (reg_addr == NTT_INTT_PWM_DIN_108_OFFSET);
    addr_hit[109] = (reg_addr == NTT_INTT_PWM_DIN_109_OFFSET);
    addr_hit[110] = (reg_addr == NTT_INTT_PWM_DIN_110_OFFSET);
    addr_hit[111] = (reg_addr == NTT_INTT_PWM_DIN_111_OFFSET);
    addr_hit[112] = (reg_addr == NTT_INTT_PWM_DIN_112_OFFSET);
    addr_hit[113] = (reg_addr == NTT_INTT_PWM_DIN_113_OFFSET);
    addr_hit[114] = (reg_addr == NTT_INTT_PWM_DIN_114_OFFSET);
    addr_hit[115] = (reg_addr == NTT_INTT_PWM_DIN_115_OFFSET);
    addr_hit[116] = (reg_addr == NTT_INTT_PWM_DIN_116_OFFSET);
    addr_hit[117] = (reg_addr == NTT_INTT_PWM_DIN_117_OFFSET);
    addr_hit[118] = (reg_addr == NTT_INTT_PWM_DIN_118_OFFSET);
    addr_hit[119] = (reg_addr == NTT_INTT_PWM_DIN_119_OFFSET);
    addr_hit[120] = (reg_addr == NTT_INTT_PWM_DIN_120_OFFSET);
    addr_hit[121] = (reg_addr == NTT_INTT_PWM_DIN_121_OFFSET);
    addr_hit[122] = (reg_addr == NTT_INTT_PWM_DIN_122_OFFSET);
    addr_hit[123] = (reg_addr == NTT_INTT_PWM_DIN_123_OFFSET);
    addr_hit[124] = (reg_addr == NTT_INTT_PWM_DIN_124_OFFSET);
    addr_hit[125] = (reg_addr == NTT_INTT_PWM_DIN_125_OFFSET);
    addr_hit[126] = (reg_addr == NTT_INTT_PWM_DIN_126_OFFSET);
    addr_hit[127] = (reg_addr == NTT_INTT_PWM_DIN_127_OFFSET);
    addr_hit[128] = (reg_addr == NTT_INTT_PWM_DOUT_0_OFFSET);
    addr_hit[129] = (reg_addr == NTT_INTT_PWM_DOUT_1_OFFSET);
    addr_hit[130] = (reg_addr == NTT_INTT_PWM_DOUT_2_OFFSET);
    addr_hit[131] = (reg_addr == NTT_INTT_PWM_DOUT_3_OFFSET);
    addr_hit[132] = (reg_addr == NTT_INTT_PWM_DOUT_4_OFFSET);
    addr_hit[133] = (reg_addr == NTT_INTT_PWM_DOUT_5_OFFSET);
    addr_hit[134] = (reg_addr == NTT_INTT_PWM_DOUT_6_OFFSET);
    addr_hit[135] = (reg_addr == NTT_INTT_PWM_DOUT_7_OFFSET);
    addr_hit[136] = (reg_addr == NTT_INTT_PWM_DOUT_8_OFFSET);
    addr_hit[137] = (reg_addr == NTT_INTT_PWM_DOUT_9_OFFSET);
    addr_hit[138] = (reg_addr == NTT_INTT_PWM_DOUT_10_OFFSET);
    addr_hit[139] = (reg_addr == NTT_INTT_PWM_DOUT_11_OFFSET);
    addr_hit[140] = (reg_addr == NTT_INTT_PWM_DOUT_12_OFFSET);
    addr_hit[141] = (reg_addr == NTT_INTT_PWM_DOUT_13_OFFSET);
    addr_hit[142] = (reg_addr == NTT_INTT_PWM_DOUT_14_OFFSET);
    addr_hit[143] = (reg_addr == NTT_INTT_PWM_DOUT_15_OFFSET);
    addr_hit[144] = (reg_addr == NTT_INTT_PWM_DOUT_16_OFFSET);
    addr_hit[145] = (reg_addr == NTT_INTT_PWM_DOUT_17_OFFSET);
    addr_hit[146] = (reg_addr == NTT_INTT_PWM_DOUT_18_OFFSET);
    addr_hit[147] = (reg_addr == NTT_INTT_PWM_DOUT_19_OFFSET);
    addr_hit[148] = (reg_addr == NTT_INTT_PWM_DOUT_20_OFFSET);
    addr_hit[149] = (reg_addr == NTT_INTT_PWM_DOUT_21_OFFSET);
    addr_hit[150] = (reg_addr == NTT_INTT_PWM_DOUT_22_OFFSET);
    addr_hit[151] = (reg_addr == NTT_INTT_PWM_DOUT_23_OFFSET);
    addr_hit[152] = (reg_addr == NTT_INTT_PWM_DOUT_24_OFFSET);
    addr_hit[153] = (reg_addr == NTT_INTT_PWM_DOUT_25_OFFSET);
    addr_hit[154] = (reg_addr == NTT_INTT_PWM_DOUT_26_OFFSET);
    addr_hit[155] = (reg_addr == NTT_INTT_PWM_DOUT_27_OFFSET);
    addr_hit[156] = (reg_addr == NTT_INTT_PWM_DOUT_28_OFFSET);
    addr_hit[157] = (reg_addr == NTT_INTT_PWM_DOUT_29_OFFSET);
    addr_hit[158] = (reg_addr == NTT_INTT_PWM_DOUT_30_OFFSET);
    addr_hit[159] = (reg_addr == NTT_INTT_PWM_DOUT_31_OFFSET);
    addr_hit[160] = (reg_addr == NTT_INTT_PWM_DOUT_32_OFFSET);
    addr_hit[161] = (reg_addr == NTT_INTT_PWM_DOUT_33_OFFSET);
    addr_hit[162] = (reg_addr == NTT_INTT_PWM_DOUT_34_OFFSET);
    addr_hit[163] = (reg_addr == NTT_INTT_PWM_DOUT_35_OFFSET);
    addr_hit[164] = (reg_addr == NTT_INTT_PWM_DOUT_36_OFFSET);
    addr_hit[165] = (reg_addr == NTT_INTT_PWM_DOUT_37_OFFSET);
    addr_hit[166] = (reg_addr == NTT_INTT_PWM_DOUT_38_OFFSET);
    addr_hit[167] = (reg_addr == NTT_INTT_PWM_DOUT_39_OFFSET);
    addr_hit[168] = (reg_addr == NTT_INTT_PWM_DOUT_40_OFFSET);
    addr_hit[169] = (reg_addr == NTT_INTT_PWM_DOUT_41_OFFSET);
    addr_hit[170] = (reg_addr == NTT_INTT_PWM_DOUT_42_OFFSET);
    addr_hit[171] = (reg_addr == NTT_INTT_PWM_DOUT_43_OFFSET);
    addr_hit[172] = (reg_addr == NTT_INTT_PWM_DOUT_44_OFFSET);
    addr_hit[173] = (reg_addr == NTT_INTT_PWM_DOUT_45_OFFSET);
    addr_hit[174] = (reg_addr == NTT_INTT_PWM_DOUT_46_OFFSET);
    addr_hit[175] = (reg_addr == NTT_INTT_PWM_DOUT_47_OFFSET);
    addr_hit[176] = (reg_addr == NTT_INTT_PWM_DOUT_48_OFFSET);
    addr_hit[177] = (reg_addr == NTT_INTT_PWM_DOUT_49_OFFSET);
    addr_hit[178] = (reg_addr == NTT_INTT_PWM_DOUT_50_OFFSET);
    addr_hit[179] = (reg_addr == NTT_INTT_PWM_DOUT_51_OFFSET);
    addr_hit[180] = (reg_addr == NTT_INTT_PWM_DOUT_52_OFFSET);
    addr_hit[181] = (reg_addr == NTT_INTT_PWM_DOUT_53_OFFSET);
    addr_hit[182] = (reg_addr == NTT_INTT_PWM_DOUT_54_OFFSET);
    addr_hit[183] = (reg_addr == NTT_INTT_PWM_DOUT_55_OFFSET);
    addr_hit[184] = (reg_addr == NTT_INTT_PWM_DOUT_56_OFFSET);
    addr_hit[185] = (reg_addr == NTT_INTT_PWM_DOUT_57_OFFSET);
    addr_hit[186] = (reg_addr == NTT_INTT_PWM_DOUT_58_OFFSET);
    addr_hit[187] = (reg_addr == NTT_INTT_PWM_DOUT_59_OFFSET);
    addr_hit[188] = (reg_addr == NTT_INTT_PWM_DOUT_60_OFFSET);
    addr_hit[189] = (reg_addr == NTT_INTT_PWM_DOUT_61_OFFSET);
    addr_hit[190] = (reg_addr == NTT_INTT_PWM_DOUT_62_OFFSET);
    addr_hit[191] = (reg_addr == NTT_INTT_PWM_DOUT_63_OFFSET);
    addr_hit[192] = (reg_addr == NTT_INTT_PWM_DOUT_64_OFFSET);
    addr_hit[193] = (reg_addr == NTT_INTT_PWM_DOUT_65_OFFSET);
    addr_hit[194] = (reg_addr == NTT_INTT_PWM_DOUT_66_OFFSET);
    addr_hit[195] = (reg_addr == NTT_INTT_PWM_DOUT_67_OFFSET);
    addr_hit[196] = (reg_addr == NTT_INTT_PWM_DOUT_68_OFFSET);
    addr_hit[197] = (reg_addr == NTT_INTT_PWM_DOUT_69_OFFSET);
    addr_hit[198] = (reg_addr == NTT_INTT_PWM_DOUT_70_OFFSET);
    addr_hit[199] = (reg_addr == NTT_INTT_PWM_DOUT_71_OFFSET);
    addr_hit[200] = (reg_addr == NTT_INTT_PWM_DOUT_72_OFFSET);
    addr_hit[201] = (reg_addr == NTT_INTT_PWM_DOUT_73_OFFSET);
    addr_hit[202] = (reg_addr == NTT_INTT_PWM_DOUT_74_OFFSET);
    addr_hit[203] = (reg_addr == NTT_INTT_PWM_DOUT_75_OFFSET);
    addr_hit[204] = (reg_addr == NTT_INTT_PWM_DOUT_76_OFFSET);
    addr_hit[205] = (reg_addr == NTT_INTT_PWM_DOUT_77_OFFSET);
    addr_hit[206] = (reg_addr == NTT_INTT_PWM_DOUT_78_OFFSET);
    addr_hit[207] = (reg_addr == NTT_INTT_PWM_DOUT_79_OFFSET);
    addr_hit[208] = (reg_addr == NTT_INTT_PWM_DOUT_80_OFFSET);
    addr_hit[209] = (reg_addr == NTT_INTT_PWM_DOUT_81_OFFSET);
    addr_hit[210] = (reg_addr == NTT_INTT_PWM_DOUT_82_OFFSET);
    addr_hit[211] = (reg_addr == NTT_INTT_PWM_DOUT_83_OFFSET);
    addr_hit[212] = (reg_addr == NTT_INTT_PWM_DOUT_84_OFFSET);
    addr_hit[213] = (reg_addr == NTT_INTT_PWM_DOUT_85_OFFSET);
    addr_hit[214] = (reg_addr == NTT_INTT_PWM_DOUT_86_OFFSET);
    addr_hit[215] = (reg_addr == NTT_INTT_PWM_DOUT_87_OFFSET);
    addr_hit[216] = (reg_addr == NTT_INTT_PWM_DOUT_88_OFFSET);
    addr_hit[217] = (reg_addr == NTT_INTT_PWM_DOUT_89_OFFSET);
    addr_hit[218] = (reg_addr == NTT_INTT_PWM_DOUT_90_OFFSET);
    addr_hit[219] = (reg_addr == NTT_INTT_PWM_DOUT_91_OFFSET);
    addr_hit[220] = (reg_addr == NTT_INTT_PWM_DOUT_92_OFFSET);
    addr_hit[221] = (reg_addr == NTT_INTT_PWM_DOUT_93_OFFSET);
    addr_hit[222] = (reg_addr == NTT_INTT_PWM_DOUT_94_OFFSET);
    addr_hit[223] = (reg_addr == NTT_INTT_PWM_DOUT_95_OFFSET);
    addr_hit[224] = (reg_addr == NTT_INTT_PWM_DOUT_96_OFFSET);
    addr_hit[225] = (reg_addr == NTT_INTT_PWM_DOUT_97_OFFSET);
    addr_hit[226] = (reg_addr == NTT_INTT_PWM_DOUT_98_OFFSET);
    addr_hit[227] = (reg_addr == NTT_INTT_PWM_DOUT_99_OFFSET);
    addr_hit[228] = (reg_addr == NTT_INTT_PWM_DOUT_100_OFFSET);
    addr_hit[229] = (reg_addr == NTT_INTT_PWM_DOUT_101_OFFSET);
    addr_hit[230] = (reg_addr == NTT_INTT_PWM_DOUT_102_OFFSET);
    addr_hit[231] = (reg_addr == NTT_INTT_PWM_DOUT_103_OFFSET);
    addr_hit[232] = (reg_addr == NTT_INTT_PWM_DOUT_104_OFFSET);
    addr_hit[233] = (reg_addr == NTT_INTT_PWM_DOUT_105_OFFSET);
    addr_hit[234] = (reg_addr == NTT_INTT_PWM_DOUT_106_OFFSET);
    addr_hit[235] = (reg_addr == NTT_INTT_PWM_DOUT_107_OFFSET);
    addr_hit[236] = (reg_addr == NTT_INTT_PWM_DOUT_108_OFFSET);
    addr_hit[237] = (reg_addr == NTT_INTT_PWM_DOUT_109_OFFSET);
    addr_hit[238] = (reg_addr == NTT_INTT_PWM_DOUT_110_OFFSET);
    addr_hit[239] = (reg_addr == NTT_INTT_PWM_DOUT_111_OFFSET);
    addr_hit[240] = (reg_addr == NTT_INTT_PWM_DOUT_112_OFFSET);
    addr_hit[241] = (reg_addr == NTT_INTT_PWM_DOUT_113_OFFSET);
    addr_hit[242] = (reg_addr == NTT_INTT_PWM_DOUT_114_OFFSET);
    addr_hit[243] = (reg_addr == NTT_INTT_PWM_DOUT_115_OFFSET);
    addr_hit[244] = (reg_addr == NTT_INTT_PWM_DOUT_116_OFFSET);
    addr_hit[245] = (reg_addr == NTT_INTT_PWM_DOUT_117_OFFSET);
    addr_hit[246] = (reg_addr == NTT_INTT_PWM_DOUT_118_OFFSET);
    addr_hit[247] = (reg_addr == NTT_INTT_PWM_DOUT_119_OFFSET);
    addr_hit[248] = (reg_addr == NTT_INTT_PWM_DOUT_120_OFFSET);
    addr_hit[249] = (reg_addr == NTT_INTT_PWM_DOUT_121_OFFSET);
    addr_hit[250] = (reg_addr == NTT_INTT_PWM_DOUT_122_OFFSET);
    addr_hit[251] = (reg_addr == NTT_INTT_PWM_DOUT_123_OFFSET);
    addr_hit[252] = (reg_addr == NTT_INTT_PWM_DOUT_124_OFFSET);
    addr_hit[253] = (reg_addr == NTT_INTT_PWM_DOUT_125_OFFSET);
    addr_hit[254] = (reg_addr == NTT_INTT_PWM_DOUT_126_OFFSET);
    addr_hit[255] = (reg_addr == NTT_INTT_PWM_DOUT_127_OFFSET);
    addr_hit[256] = (reg_addr == NTT_INTT_PWM_CTRL_OFFSET);
    addr_hit[257] = (reg_addr == NTT_INTT_PWM_STATUS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[  0] && reg_we && (NTT_INTT_PWM_PERMIT[  0] != (NTT_INTT_PWM_PERMIT[  0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  1] && reg_we && (NTT_INTT_PWM_PERMIT[  1] != (NTT_INTT_PWM_PERMIT[  1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  2] && reg_we && (NTT_INTT_PWM_PERMIT[  2] != (NTT_INTT_PWM_PERMIT[  2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  3] && reg_we && (NTT_INTT_PWM_PERMIT[  3] != (NTT_INTT_PWM_PERMIT[  3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  4] && reg_we && (NTT_INTT_PWM_PERMIT[  4] != (NTT_INTT_PWM_PERMIT[  4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  5] && reg_we && (NTT_INTT_PWM_PERMIT[  5] != (NTT_INTT_PWM_PERMIT[  5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  6] && reg_we && (NTT_INTT_PWM_PERMIT[  6] != (NTT_INTT_PWM_PERMIT[  6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  7] && reg_we && (NTT_INTT_PWM_PERMIT[  7] != (NTT_INTT_PWM_PERMIT[  7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  8] && reg_we && (NTT_INTT_PWM_PERMIT[  8] != (NTT_INTT_PWM_PERMIT[  8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[  9] && reg_we && (NTT_INTT_PWM_PERMIT[  9] != (NTT_INTT_PWM_PERMIT[  9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 10] && reg_we && (NTT_INTT_PWM_PERMIT[ 10] != (NTT_INTT_PWM_PERMIT[ 10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 11] && reg_we && (NTT_INTT_PWM_PERMIT[ 11] != (NTT_INTT_PWM_PERMIT[ 11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 12] && reg_we && (NTT_INTT_PWM_PERMIT[ 12] != (NTT_INTT_PWM_PERMIT[ 12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 13] && reg_we && (NTT_INTT_PWM_PERMIT[ 13] != (NTT_INTT_PWM_PERMIT[ 13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 14] && reg_we && (NTT_INTT_PWM_PERMIT[ 14] != (NTT_INTT_PWM_PERMIT[ 14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 15] && reg_we && (NTT_INTT_PWM_PERMIT[ 15] != (NTT_INTT_PWM_PERMIT[ 15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 16] && reg_we && (NTT_INTT_PWM_PERMIT[ 16] != (NTT_INTT_PWM_PERMIT[ 16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 17] && reg_we && (NTT_INTT_PWM_PERMIT[ 17] != (NTT_INTT_PWM_PERMIT[ 17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 18] && reg_we && (NTT_INTT_PWM_PERMIT[ 18] != (NTT_INTT_PWM_PERMIT[ 18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 19] && reg_we && (NTT_INTT_PWM_PERMIT[ 19] != (NTT_INTT_PWM_PERMIT[ 19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 20] && reg_we && (NTT_INTT_PWM_PERMIT[ 20] != (NTT_INTT_PWM_PERMIT[ 20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 21] && reg_we && (NTT_INTT_PWM_PERMIT[ 21] != (NTT_INTT_PWM_PERMIT[ 21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 22] && reg_we && (NTT_INTT_PWM_PERMIT[ 22] != (NTT_INTT_PWM_PERMIT[ 22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 23] && reg_we && (NTT_INTT_PWM_PERMIT[ 23] != (NTT_INTT_PWM_PERMIT[ 23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 24] && reg_we && (NTT_INTT_PWM_PERMIT[ 24] != (NTT_INTT_PWM_PERMIT[ 24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 25] && reg_we && (NTT_INTT_PWM_PERMIT[ 25] != (NTT_INTT_PWM_PERMIT[ 25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 26] && reg_we && (NTT_INTT_PWM_PERMIT[ 26] != (NTT_INTT_PWM_PERMIT[ 26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 27] && reg_we && (NTT_INTT_PWM_PERMIT[ 27] != (NTT_INTT_PWM_PERMIT[ 27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 28] && reg_we && (NTT_INTT_PWM_PERMIT[ 28] != (NTT_INTT_PWM_PERMIT[ 28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 29] && reg_we && (NTT_INTT_PWM_PERMIT[ 29] != (NTT_INTT_PWM_PERMIT[ 29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 30] && reg_we && (NTT_INTT_PWM_PERMIT[ 30] != (NTT_INTT_PWM_PERMIT[ 30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 31] && reg_we && (NTT_INTT_PWM_PERMIT[ 31] != (NTT_INTT_PWM_PERMIT[ 31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 32] && reg_we && (NTT_INTT_PWM_PERMIT[ 32] != (NTT_INTT_PWM_PERMIT[ 32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 33] && reg_we && (NTT_INTT_PWM_PERMIT[ 33] != (NTT_INTT_PWM_PERMIT[ 33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 34] && reg_we && (NTT_INTT_PWM_PERMIT[ 34] != (NTT_INTT_PWM_PERMIT[ 34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 35] && reg_we && (NTT_INTT_PWM_PERMIT[ 35] != (NTT_INTT_PWM_PERMIT[ 35] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 36] && reg_we && (NTT_INTT_PWM_PERMIT[ 36] != (NTT_INTT_PWM_PERMIT[ 36] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 37] && reg_we && (NTT_INTT_PWM_PERMIT[ 37] != (NTT_INTT_PWM_PERMIT[ 37] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 38] && reg_we && (NTT_INTT_PWM_PERMIT[ 38] != (NTT_INTT_PWM_PERMIT[ 38] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 39] && reg_we && (NTT_INTT_PWM_PERMIT[ 39] != (NTT_INTT_PWM_PERMIT[ 39] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 40] && reg_we && (NTT_INTT_PWM_PERMIT[ 40] != (NTT_INTT_PWM_PERMIT[ 40] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 41] && reg_we && (NTT_INTT_PWM_PERMIT[ 41] != (NTT_INTT_PWM_PERMIT[ 41] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 42] && reg_we && (NTT_INTT_PWM_PERMIT[ 42] != (NTT_INTT_PWM_PERMIT[ 42] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 43] && reg_we && (NTT_INTT_PWM_PERMIT[ 43] != (NTT_INTT_PWM_PERMIT[ 43] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 44] && reg_we && (NTT_INTT_PWM_PERMIT[ 44] != (NTT_INTT_PWM_PERMIT[ 44] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 45] && reg_we && (NTT_INTT_PWM_PERMIT[ 45] != (NTT_INTT_PWM_PERMIT[ 45] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 46] && reg_we && (NTT_INTT_PWM_PERMIT[ 46] != (NTT_INTT_PWM_PERMIT[ 46] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 47] && reg_we && (NTT_INTT_PWM_PERMIT[ 47] != (NTT_INTT_PWM_PERMIT[ 47] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 48] && reg_we && (NTT_INTT_PWM_PERMIT[ 48] != (NTT_INTT_PWM_PERMIT[ 48] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 49] && reg_we && (NTT_INTT_PWM_PERMIT[ 49] != (NTT_INTT_PWM_PERMIT[ 49] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 50] && reg_we && (NTT_INTT_PWM_PERMIT[ 50] != (NTT_INTT_PWM_PERMIT[ 50] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 51] && reg_we && (NTT_INTT_PWM_PERMIT[ 51] != (NTT_INTT_PWM_PERMIT[ 51] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 52] && reg_we && (NTT_INTT_PWM_PERMIT[ 52] != (NTT_INTT_PWM_PERMIT[ 52] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 53] && reg_we && (NTT_INTT_PWM_PERMIT[ 53] != (NTT_INTT_PWM_PERMIT[ 53] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 54] && reg_we && (NTT_INTT_PWM_PERMIT[ 54] != (NTT_INTT_PWM_PERMIT[ 54] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 55] && reg_we && (NTT_INTT_PWM_PERMIT[ 55] != (NTT_INTT_PWM_PERMIT[ 55] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 56] && reg_we && (NTT_INTT_PWM_PERMIT[ 56] != (NTT_INTT_PWM_PERMIT[ 56] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 57] && reg_we && (NTT_INTT_PWM_PERMIT[ 57] != (NTT_INTT_PWM_PERMIT[ 57] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 58] && reg_we && (NTT_INTT_PWM_PERMIT[ 58] != (NTT_INTT_PWM_PERMIT[ 58] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 59] && reg_we && (NTT_INTT_PWM_PERMIT[ 59] != (NTT_INTT_PWM_PERMIT[ 59] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 60] && reg_we && (NTT_INTT_PWM_PERMIT[ 60] != (NTT_INTT_PWM_PERMIT[ 60] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 61] && reg_we && (NTT_INTT_PWM_PERMIT[ 61] != (NTT_INTT_PWM_PERMIT[ 61] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 62] && reg_we && (NTT_INTT_PWM_PERMIT[ 62] != (NTT_INTT_PWM_PERMIT[ 62] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 63] && reg_we && (NTT_INTT_PWM_PERMIT[ 63] != (NTT_INTT_PWM_PERMIT[ 63] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 64] && reg_we && (NTT_INTT_PWM_PERMIT[ 64] != (NTT_INTT_PWM_PERMIT[ 64] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 65] && reg_we && (NTT_INTT_PWM_PERMIT[ 65] != (NTT_INTT_PWM_PERMIT[ 65] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 66] && reg_we && (NTT_INTT_PWM_PERMIT[ 66] != (NTT_INTT_PWM_PERMIT[ 66] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 67] && reg_we && (NTT_INTT_PWM_PERMIT[ 67] != (NTT_INTT_PWM_PERMIT[ 67] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 68] && reg_we && (NTT_INTT_PWM_PERMIT[ 68] != (NTT_INTT_PWM_PERMIT[ 68] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 69] && reg_we && (NTT_INTT_PWM_PERMIT[ 69] != (NTT_INTT_PWM_PERMIT[ 69] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 70] && reg_we && (NTT_INTT_PWM_PERMIT[ 70] != (NTT_INTT_PWM_PERMIT[ 70] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 71] && reg_we && (NTT_INTT_PWM_PERMIT[ 71] != (NTT_INTT_PWM_PERMIT[ 71] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 72] && reg_we && (NTT_INTT_PWM_PERMIT[ 72] != (NTT_INTT_PWM_PERMIT[ 72] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 73] && reg_we && (NTT_INTT_PWM_PERMIT[ 73] != (NTT_INTT_PWM_PERMIT[ 73] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 74] && reg_we && (NTT_INTT_PWM_PERMIT[ 74] != (NTT_INTT_PWM_PERMIT[ 74] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 75] && reg_we && (NTT_INTT_PWM_PERMIT[ 75] != (NTT_INTT_PWM_PERMIT[ 75] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 76] && reg_we && (NTT_INTT_PWM_PERMIT[ 76] != (NTT_INTT_PWM_PERMIT[ 76] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 77] && reg_we && (NTT_INTT_PWM_PERMIT[ 77] != (NTT_INTT_PWM_PERMIT[ 77] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 78] && reg_we && (NTT_INTT_PWM_PERMIT[ 78] != (NTT_INTT_PWM_PERMIT[ 78] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 79] && reg_we && (NTT_INTT_PWM_PERMIT[ 79] != (NTT_INTT_PWM_PERMIT[ 79] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 80] && reg_we && (NTT_INTT_PWM_PERMIT[ 80] != (NTT_INTT_PWM_PERMIT[ 80] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 81] && reg_we && (NTT_INTT_PWM_PERMIT[ 81] != (NTT_INTT_PWM_PERMIT[ 81] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 82] && reg_we && (NTT_INTT_PWM_PERMIT[ 82] != (NTT_INTT_PWM_PERMIT[ 82] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 83] && reg_we && (NTT_INTT_PWM_PERMIT[ 83] != (NTT_INTT_PWM_PERMIT[ 83] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 84] && reg_we && (NTT_INTT_PWM_PERMIT[ 84] != (NTT_INTT_PWM_PERMIT[ 84] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 85] && reg_we && (NTT_INTT_PWM_PERMIT[ 85] != (NTT_INTT_PWM_PERMIT[ 85] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 86] && reg_we && (NTT_INTT_PWM_PERMIT[ 86] != (NTT_INTT_PWM_PERMIT[ 86] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 87] && reg_we && (NTT_INTT_PWM_PERMIT[ 87] != (NTT_INTT_PWM_PERMIT[ 87] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 88] && reg_we && (NTT_INTT_PWM_PERMIT[ 88] != (NTT_INTT_PWM_PERMIT[ 88] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 89] && reg_we && (NTT_INTT_PWM_PERMIT[ 89] != (NTT_INTT_PWM_PERMIT[ 89] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 90] && reg_we && (NTT_INTT_PWM_PERMIT[ 90] != (NTT_INTT_PWM_PERMIT[ 90] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 91] && reg_we && (NTT_INTT_PWM_PERMIT[ 91] != (NTT_INTT_PWM_PERMIT[ 91] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 92] && reg_we && (NTT_INTT_PWM_PERMIT[ 92] != (NTT_INTT_PWM_PERMIT[ 92] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 93] && reg_we && (NTT_INTT_PWM_PERMIT[ 93] != (NTT_INTT_PWM_PERMIT[ 93] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 94] && reg_we && (NTT_INTT_PWM_PERMIT[ 94] != (NTT_INTT_PWM_PERMIT[ 94] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 95] && reg_we && (NTT_INTT_PWM_PERMIT[ 95] != (NTT_INTT_PWM_PERMIT[ 95] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 96] && reg_we && (NTT_INTT_PWM_PERMIT[ 96] != (NTT_INTT_PWM_PERMIT[ 96] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 97] && reg_we && (NTT_INTT_PWM_PERMIT[ 97] != (NTT_INTT_PWM_PERMIT[ 97] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 98] && reg_we && (NTT_INTT_PWM_PERMIT[ 98] != (NTT_INTT_PWM_PERMIT[ 98] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 99] && reg_we && (NTT_INTT_PWM_PERMIT[ 99] != (NTT_INTT_PWM_PERMIT[ 99] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[100] && reg_we && (NTT_INTT_PWM_PERMIT[100] != (NTT_INTT_PWM_PERMIT[100] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[101] && reg_we && (NTT_INTT_PWM_PERMIT[101] != (NTT_INTT_PWM_PERMIT[101] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[102] && reg_we && (NTT_INTT_PWM_PERMIT[102] != (NTT_INTT_PWM_PERMIT[102] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[103] && reg_we && (NTT_INTT_PWM_PERMIT[103] != (NTT_INTT_PWM_PERMIT[103] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[104] && reg_we && (NTT_INTT_PWM_PERMIT[104] != (NTT_INTT_PWM_PERMIT[104] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[105] && reg_we && (NTT_INTT_PWM_PERMIT[105] != (NTT_INTT_PWM_PERMIT[105] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[106] && reg_we && (NTT_INTT_PWM_PERMIT[106] != (NTT_INTT_PWM_PERMIT[106] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[107] && reg_we && (NTT_INTT_PWM_PERMIT[107] != (NTT_INTT_PWM_PERMIT[107] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[108] && reg_we && (NTT_INTT_PWM_PERMIT[108] != (NTT_INTT_PWM_PERMIT[108] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[109] && reg_we && (NTT_INTT_PWM_PERMIT[109] != (NTT_INTT_PWM_PERMIT[109] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[110] && reg_we && (NTT_INTT_PWM_PERMIT[110] != (NTT_INTT_PWM_PERMIT[110] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[111] && reg_we && (NTT_INTT_PWM_PERMIT[111] != (NTT_INTT_PWM_PERMIT[111] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[112] && reg_we && (NTT_INTT_PWM_PERMIT[112] != (NTT_INTT_PWM_PERMIT[112] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[113] && reg_we && (NTT_INTT_PWM_PERMIT[113] != (NTT_INTT_PWM_PERMIT[113] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[114] && reg_we && (NTT_INTT_PWM_PERMIT[114] != (NTT_INTT_PWM_PERMIT[114] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[115] && reg_we && (NTT_INTT_PWM_PERMIT[115] != (NTT_INTT_PWM_PERMIT[115] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[116] && reg_we && (NTT_INTT_PWM_PERMIT[116] != (NTT_INTT_PWM_PERMIT[116] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[117] && reg_we && (NTT_INTT_PWM_PERMIT[117] != (NTT_INTT_PWM_PERMIT[117] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[118] && reg_we && (NTT_INTT_PWM_PERMIT[118] != (NTT_INTT_PWM_PERMIT[118] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[119] && reg_we && (NTT_INTT_PWM_PERMIT[119] != (NTT_INTT_PWM_PERMIT[119] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[120] && reg_we && (NTT_INTT_PWM_PERMIT[120] != (NTT_INTT_PWM_PERMIT[120] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[121] && reg_we && (NTT_INTT_PWM_PERMIT[121] != (NTT_INTT_PWM_PERMIT[121] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[122] && reg_we && (NTT_INTT_PWM_PERMIT[122] != (NTT_INTT_PWM_PERMIT[122] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[123] && reg_we && (NTT_INTT_PWM_PERMIT[123] != (NTT_INTT_PWM_PERMIT[123] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[124] && reg_we && (NTT_INTT_PWM_PERMIT[124] != (NTT_INTT_PWM_PERMIT[124] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[125] && reg_we && (NTT_INTT_PWM_PERMIT[125] != (NTT_INTT_PWM_PERMIT[125] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[126] && reg_we && (NTT_INTT_PWM_PERMIT[126] != (NTT_INTT_PWM_PERMIT[126] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[127] && reg_we && (NTT_INTT_PWM_PERMIT[127] != (NTT_INTT_PWM_PERMIT[127] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[128] && reg_we && (NTT_INTT_PWM_PERMIT[128] != (NTT_INTT_PWM_PERMIT[128] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[129] && reg_we && (NTT_INTT_PWM_PERMIT[129] != (NTT_INTT_PWM_PERMIT[129] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[130] && reg_we && (NTT_INTT_PWM_PERMIT[130] != (NTT_INTT_PWM_PERMIT[130] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[131] && reg_we && (NTT_INTT_PWM_PERMIT[131] != (NTT_INTT_PWM_PERMIT[131] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[132] && reg_we && (NTT_INTT_PWM_PERMIT[132] != (NTT_INTT_PWM_PERMIT[132] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[133] && reg_we && (NTT_INTT_PWM_PERMIT[133] != (NTT_INTT_PWM_PERMIT[133] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[134] && reg_we && (NTT_INTT_PWM_PERMIT[134] != (NTT_INTT_PWM_PERMIT[134] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[135] && reg_we && (NTT_INTT_PWM_PERMIT[135] != (NTT_INTT_PWM_PERMIT[135] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[136] && reg_we && (NTT_INTT_PWM_PERMIT[136] != (NTT_INTT_PWM_PERMIT[136] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[137] && reg_we && (NTT_INTT_PWM_PERMIT[137] != (NTT_INTT_PWM_PERMIT[137] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[138] && reg_we && (NTT_INTT_PWM_PERMIT[138] != (NTT_INTT_PWM_PERMIT[138] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[139] && reg_we && (NTT_INTT_PWM_PERMIT[139] != (NTT_INTT_PWM_PERMIT[139] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[140] && reg_we && (NTT_INTT_PWM_PERMIT[140] != (NTT_INTT_PWM_PERMIT[140] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[141] && reg_we && (NTT_INTT_PWM_PERMIT[141] != (NTT_INTT_PWM_PERMIT[141] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[142] && reg_we && (NTT_INTT_PWM_PERMIT[142] != (NTT_INTT_PWM_PERMIT[142] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[143] && reg_we && (NTT_INTT_PWM_PERMIT[143] != (NTT_INTT_PWM_PERMIT[143] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[144] && reg_we && (NTT_INTT_PWM_PERMIT[144] != (NTT_INTT_PWM_PERMIT[144] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[145] && reg_we && (NTT_INTT_PWM_PERMIT[145] != (NTT_INTT_PWM_PERMIT[145] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[146] && reg_we && (NTT_INTT_PWM_PERMIT[146] != (NTT_INTT_PWM_PERMIT[146] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[147] && reg_we && (NTT_INTT_PWM_PERMIT[147] != (NTT_INTT_PWM_PERMIT[147] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[148] && reg_we && (NTT_INTT_PWM_PERMIT[148] != (NTT_INTT_PWM_PERMIT[148] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[149] && reg_we && (NTT_INTT_PWM_PERMIT[149] != (NTT_INTT_PWM_PERMIT[149] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[150] && reg_we && (NTT_INTT_PWM_PERMIT[150] != (NTT_INTT_PWM_PERMIT[150] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[151] && reg_we && (NTT_INTT_PWM_PERMIT[151] != (NTT_INTT_PWM_PERMIT[151] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[152] && reg_we && (NTT_INTT_PWM_PERMIT[152] != (NTT_INTT_PWM_PERMIT[152] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[153] && reg_we && (NTT_INTT_PWM_PERMIT[153] != (NTT_INTT_PWM_PERMIT[153] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[154] && reg_we && (NTT_INTT_PWM_PERMIT[154] != (NTT_INTT_PWM_PERMIT[154] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[155] && reg_we && (NTT_INTT_PWM_PERMIT[155] != (NTT_INTT_PWM_PERMIT[155] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[156] && reg_we && (NTT_INTT_PWM_PERMIT[156] != (NTT_INTT_PWM_PERMIT[156] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[157] && reg_we && (NTT_INTT_PWM_PERMIT[157] != (NTT_INTT_PWM_PERMIT[157] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[158] && reg_we && (NTT_INTT_PWM_PERMIT[158] != (NTT_INTT_PWM_PERMIT[158] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[159] && reg_we && (NTT_INTT_PWM_PERMIT[159] != (NTT_INTT_PWM_PERMIT[159] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[160] && reg_we && (NTT_INTT_PWM_PERMIT[160] != (NTT_INTT_PWM_PERMIT[160] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[161] && reg_we && (NTT_INTT_PWM_PERMIT[161] != (NTT_INTT_PWM_PERMIT[161] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[162] && reg_we && (NTT_INTT_PWM_PERMIT[162] != (NTT_INTT_PWM_PERMIT[162] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[163] && reg_we && (NTT_INTT_PWM_PERMIT[163] != (NTT_INTT_PWM_PERMIT[163] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[164] && reg_we && (NTT_INTT_PWM_PERMIT[164] != (NTT_INTT_PWM_PERMIT[164] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[165] && reg_we && (NTT_INTT_PWM_PERMIT[165] != (NTT_INTT_PWM_PERMIT[165] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[166] && reg_we && (NTT_INTT_PWM_PERMIT[166] != (NTT_INTT_PWM_PERMIT[166] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[167] && reg_we && (NTT_INTT_PWM_PERMIT[167] != (NTT_INTT_PWM_PERMIT[167] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[168] && reg_we && (NTT_INTT_PWM_PERMIT[168] != (NTT_INTT_PWM_PERMIT[168] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[169] && reg_we && (NTT_INTT_PWM_PERMIT[169] != (NTT_INTT_PWM_PERMIT[169] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[170] && reg_we && (NTT_INTT_PWM_PERMIT[170] != (NTT_INTT_PWM_PERMIT[170] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[171] && reg_we && (NTT_INTT_PWM_PERMIT[171] != (NTT_INTT_PWM_PERMIT[171] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[172] && reg_we && (NTT_INTT_PWM_PERMIT[172] != (NTT_INTT_PWM_PERMIT[172] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[173] && reg_we && (NTT_INTT_PWM_PERMIT[173] != (NTT_INTT_PWM_PERMIT[173] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[174] && reg_we && (NTT_INTT_PWM_PERMIT[174] != (NTT_INTT_PWM_PERMIT[174] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[175] && reg_we && (NTT_INTT_PWM_PERMIT[175] != (NTT_INTT_PWM_PERMIT[175] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[176] && reg_we && (NTT_INTT_PWM_PERMIT[176] != (NTT_INTT_PWM_PERMIT[176] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[177] && reg_we && (NTT_INTT_PWM_PERMIT[177] != (NTT_INTT_PWM_PERMIT[177] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[178] && reg_we && (NTT_INTT_PWM_PERMIT[178] != (NTT_INTT_PWM_PERMIT[178] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[179] && reg_we && (NTT_INTT_PWM_PERMIT[179] != (NTT_INTT_PWM_PERMIT[179] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[180] && reg_we && (NTT_INTT_PWM_PERMIT[180] != (NTT_INTT_PWM_PERMIT[180] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[181] && reg_we && (NTT_INTT_PWM_PERMIT[181] != (NTT_INTT_PWM_PERMIT[181] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[182] && reg_we && (NTT_INTT_PWM_PERMIT[182] != (NTT_INTT_PWM_PERMIT[182] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[183] && reg_we && (NTT_INTT_PWM_PERMIT[183] != (NTT_INTT_PWM_PERMIT[183] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[184] && reg_we && (NTT_INTT_PWM_PERMIT[184] != (NTT_INTT_PWM_PERMIT[184] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[185] && reg_we && (NTT_INTT_PWM_PERMIT[185] != (NTT_INTT_PWM_PERMIT[185] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[186] && reg_we && (NTT_INTT_PWM_PERMIT[186] != (NTT_INTT_PWM_PERMIT[186] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[187] && reg_we && (NTT_INTT_PWM_PERMIT[187] != (NTT_INTT_PWM_PERMIT[187] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[188] && reg_we && (NTT_INTT_PWM_PERMIT[188] != (NTT_INTT_PWM_PERMIT[188] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[189] && reg_we && (NTT_INTT_PWM_PERMIT[189] != (NTT_INTT_PWM_PERMIT[189] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[190] && reg_we && (NTT_INTT_PWM_PERMIT[190] != (NTT_INTT_PWM_PERMIT[190] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[191] && reg_we && (NTT_INTT_PWM_PERMIT[191] != (NTT_INTT_PWM_PERMIT[191] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[192] && reg_we && (NTT_INTT_PWM_PERMIT[192] != (NTT_INTT_PWM_PERMIT[192] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[193] && reg_we && (NTT_INTT_PWM_PERMIT[193] != (NTT_INTT_PWM_PERMIT[193] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[194] && reg_we && (NTT_INTT_PWM_PERMIT[194] != (NTT_INTT_PWM_PERMIT[194] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[195] && reg_we && (NTT_INTT_PWM_PERMIT[195] != (NTT_INTT_PWM_PERMIT[195] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[196] && reg_we && (NTT_INTT_PWM_PERMIT[196] != (NTT_INTT_PWM_PERMIT[196] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[197] && reg_we && (NTT_INTT_PWM_PERMIT[197] != (NTT_INTT_PWM_PERMIT[197] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[198] && reg_we && (NTT_INTT_PWM_PERMIT[198] != (NTT_INTT_PWM_PERMIT[198] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[199] && reg_we && (NTT_INTT_PWM_PERMIT[199] != (NTT_INTT_PWM_PERMIT[199] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[200] && reg_we && (NTT_INTT_PWM_PERMIT[200] != (NTT_INTT_PWM_PERMIT[200] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[201] && reg_we && (NTT_INTT_PWM_PERMIT[201] != (NTT_INTT_PWM_PERMIT[201] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[202] && reg_we && (NTT_INTT_PWM_PERMIT[202] != (NTT_INTT_PWM_PERMIT[202] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[203] && reg_we && (NTT_INTT_PWM_PERMIT[203] != (NTT_INTT_PWM_PERMIT[203] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[204] && reg_we && (NTT_INTT_PWM_PERMIT[204] != (NTT_INTT_PWM_PERMIT[204] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[205] && reg_we && (NTT_INTT_PWM_PERMIT[205] != (NTT_INTT_PWM_PERMIT[205] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[206] && reg_we && (NTT_INTT_PWM_PERMIT[206] != (NTT_INTT_PWM_PERMIT[206] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[207] && reg_we && (NTT_INTT_PWM_PERMIT[207] != (NTT_INTT_PWM_PERMIT[207] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[208] && reg_we && (NTT_INTT_PWM_PERMIT[208] != (NTT_INTT_PWM_PERMIT[208] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[209] && reg_we && (NTT_INTT_PWM_PERMIT[209] != (NTT_INTT_PWM_PERMIT[209] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[210] && reg_we && (NTT_INTT_PWM_PERMIT[210] != (NTT_INTT_PWM_PERMIT[210] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[211] && reg_we && (NTT_INTT_PWM_PERMIT[211] != (NTT_INTT_PWM_PERMIT[211] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[212] && reg_we && (NTT_INTT_PWM_PERMIT[212] != (NTT_INTT_PWM_PERMIT[212] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[213] && reg_we && (NTT_INTT_PWM_PERMIT[213] != (NTT_INTT_PWM_PERMIT[213] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[214] && reg_we && (NTT_INTT_PWM_PERMIT[214] != (NTT_INTT_PWM_PERMIT[214] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[215] && reg_we && (NTT_INTT_PWM_PERMIT[215] != (NTT_INTT_PWM_PERMIT[215] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[216] && reg_we && (NTT_INTT_PWM_PERMIT[216] != (NTT_INTT_PWM_PERMIT[216] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[217] && reg_we && (NTT_INTT_PWM_PERMIT[217] != (NTT_INTT_PWM_PERMIT[217] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[218] && reg_we && (NTT_INTT_PWM_PERMIT[218] != (NTT_INTT_PWM_PERMIT[218] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[219] && reg_we && (NTT_INTT_PWM_PERMIT[219] != (NTT_INTT_PWM_PERMIT[219] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[220] && reg_we && (NTT_INTT_PWM_PERMIT[220] != (NTT_INTT_PWM_PERMIT[220] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[221] && reg_we && (NTT_INTT_PWM_PERMIT[221] != (NTT_INTT_PWM_PERMIT[221] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[222] && reg_we && (NTT_INTT_PWM_PERMIT[222] != (NTT_INTT_PWM_PERMIT[222] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[223] && reg_we && (NTT_INTT_PWM_PERMIT[223] != (NTT_INTT_PWM_PERMIT[223] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[224] && reg_we && (NTT_INTT_PWM_PERMIT[224] != (NTT_INTT_PWM_PERMIT[224] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[225] && reg_we && (NTT_INTT_PWM_PERMIT[225] != (NTT_INTT_PWM_PERMIT[225] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[226] && reg_we && (NTT_INTT_PWM_PERMIT[226] != (NTT_INTT_PWM_PERMIT[226] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[227] && reg_we && (NTT_INTT_PWM_PERMIT[227] != (NTT_INTT_PWM_PERMIT[227] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[228] && reg_we && (NTT_INTT_PWM_PERMIT[228] != (NTT_INTT_PWM_PERMIT[228] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[229] && reg_we && (NTT_INTT_PWM_PERMIT[229] != (NTT_INTT_PWM_PERMIT[229] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[230] && reg_we && (NTT_INTT_PWM_PERMIT[230] != (NTT_INTT_PWM_PERMIT[230] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[231] && reg_we && (NTT_INTT_PWM_PERMIT[231] != (NTT_INTT_PWM_PERMIT[231] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[232] && reg_we && (NTT_INTT_PWM_PERMIT[232] != (NTT_INTT_PWM_PERMIT[232] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[233] && reg_we && (NTT_INTT_PWM_PERMIT[233] != (NTT_INTT_PWM_PERMIT[233] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[234] && reg_we && (NTT_INTT_PWM_PERMIT[234] != (NTT_INTT_PWM_PERMIT[234] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[235] && reg_we && (NTT_INTT_PWM_PERMIT[235] != (NTT_INTT_PWM_PERMIT[235] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[236] && reg_we && (NTT_INTT_PWM_PERMIT[236] != (NTT_INTT_PWM_PERMIT[236] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[237] && reg_we && (NTT_INTT_PWM_PERMIT[237] != (NTT_INTT_PWM_PERMIT[237] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[238] && reg_we && (NTT_INTT_PWM_PERMIT[238] != (NTT_INTT_PWM_PERMIT[238] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[239] && reg_we && (NTT_INTT_PWM_PERMIT[239] != (NTT_INTT_PWM_PERMIT[239] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[240] && reg_we && (NTT_INTT_PWM_PERMIT[240] != (NTT_INTT_PWM_PERMIT[240] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[241] && reg_we && (NTT_INTT_PWM_PERMIT[241] != (NTT_INTT_PWM_PERMIT[241] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[242] && reg_we && (NTT_INTT_PWM_PERMIT[242] != (NTT_INTT_PWM_PERMIT[242] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[243] && reg_we && (NTT_INTT_PWM_PERMIT[243] != (NTT_INTT_PWM_PERMIT[243] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[244] && reg_we && (NTT_INTT_PWM_PERMIT[244] != (NTT_INTT_PWM_PERMIT[244] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[245] && reg_we && (NTT_INTT_PWM_PERMIT[245] != (NTT_INTT_PWM_PERMIT[245] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[246] && reg_we && (NTT_INTT_PWM_PERMIT[246] != (NTT_INTT_PWM_PERMIT[246] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[247] && reg_we && (NTT_INTT_PWM_PERMIT[247] != (NTT_INTT_PWM_PERMIT[247] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[248] && reg_we && (NTT_INTT_PWM_PERMIT[248] != (NTT_INTT_PWM_PERMIT[248] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[249] && reg_we && (NTT_INTT_PWM_PERMIT[249] != (NTT_INTT_PWM_PERMIT[249] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[250] && reg_we && (NTT_INTT_PWM_PERMIT[250] != (NTT_INTT_PWM_PERMIT[250] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[251] && reg_we && (NTT_INTT_PWM_PERMIT[251] != (NTT_INTT_PWM_PERMIT[251] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[252] && reg_we && (NTT_INTT_PWM_PERMIT[252] != (NTT_INTT_PWM_PERMIT[252] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[253] && reg_we && (NTT_INTT_PWM_PERMIT[253] != (NTT_INTT_PWM_PERMIT[253] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[254] && reg_we && (NTT_INTT_PWM_PERMIT[254] != (NTT_INTT_PWM_PERMIT[254] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[255] && reg_we && (NTT_INTT_PWM_PERMIT[255] != (NTT_INTT_PWM_PERMIT[255] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[256] && reg_we && (NTT_INTT_PWM_PERMIT[256] != (NTT_INTT_PWM_PERMIT[256] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[257] && reg_we && (NTT_INTT_PWM_PERMIT[257] != (NTT_INTT_PWM_PERMIT[257] & reg_be))) wr_err = 1'b1 ;
  end

  assign din_0_we = addr_hit[0] & reg_we & ~wr_err;
  assign din_0_wd = reg_wdata[31:0];

  assign din_1_we = addr_hit[1] & reg_we & ~wr_err;
  assign din_1_wd = reg_wdata[31:0];

  assign din_2_we = addr_hit[2] & reg_we & ~wr_err;
  assign din_2_wd = reg_wdata[31:0];

  assign din_3_we = addr_hit[3] & reg_we & ~wr_err;
  assign din_3_wd = reg_wdata[31:0];

  assign din_4_we = addr_hit[4] & reg_we & ~wr_err;
  assign din_4_wd = reg_wdata[31:0];

  assign din_5_we = addr_hit[5] & reg_we & ~wr_err;
  assign din_5_wd = reg_wdata[31:0];

  assign din_6_we = addr_hit[6] & reg_we & ~wr_err;
  assign din_6_wd = reg_wdata[31:0];

  assign din_7_we = addr_hit[7] & reg_we & ~wr_err;
  assign din_7_wd = reg_wdata[31:0];

  assign din_8_we = addr_hit[8] & reg_we & ~wr_err;
  assign din_8_wd = reg_wdata[31:0];

  assign din_9_we = addr_hit[9] & reg_we & ~wr_err;
  assign din_9_wd = reg_wdata[31:0];

  assign din_10_we = addr_hit[10] & reg_we & ~wr_err;
  assign din_10_wd = reg_wdata[31:0];

  assign din_11_we = addr_hit[11] & reg_we & ~wr_err;
  assign din_11_wd = reg_wdata[31:0];

  assign din_12_we = addr_hit[12] & reg_we & ~wr_err;
  assign din_12_wd = reg_wdata[31:0];

  assign din_13_we = addr_hit[13] & reg_we & ~wr_err;
  assign din_13_wd = reg_wdata[31:0];

  assign din_14_we = addr_hit[14] & reg_we & ~wr_err;
  assign din_14_wd = reg_wdata[31:0];

  assign din_15_we = addr_hit[15] & reg_we & ~wr_err;
  assign din_15_wd = reg_wdata[31:0];

  assign din_16_we = addr_hit[16] & reg_we & ~wr_err;
  assign din_16_wd = reg_wdata[31:0];

  assign din_17_we = addr_hit[17] & reg_we & ~wr_err;
  assign din_17_wd = reg_wdata[31:0];

  assign din_18_we = addr_hit[18] & reg_we & ~wr_err;
  assign din_18_wd = reg_wdata[31:0];

  assign din_19_we = addr_hit[19] & reg_we & ~wr_err;
  assign din_19_wd = reg_wdata[31:0];

  assign din_20_we = addr_hit[20] & reg_we & ~wr_err;
  assign din_20_wd = reg_wdata[31:0];

  assign din_21_we = addr_hit[21] & reg_we & ~wr_err;
  assign din_21_wd = reg_wdata[31:0];

  assign din_22_we = addr_hit[22] & reg_we & ~wr_err;
  assign din_22_wd = reg_wdata[31:0];

  assign din_23_we = addr_hit[23] & reg_we & ~wr_err;
  assign din_23_wd = reg_wdata[31:0];

  assign din_24_we = addr_hit[24] & reg_we & ~wr_err;
  assign din_24_wd = reg_wdata[31:0];

  assign din_25_we = addr_hit[25] & reg_we & ~wr_err;
  assign din_25_wd = reg_wdata[31:0];

  assign din_26_we = addr_hit[26] & reg_we & ~wr_err;
  assign din_26_wd = reg_wdata[31:0];

  assign din_27_we = addr_hit[27] & reg_we & ~wr_err;
  assign din_27_wd = reg_wdata[31:0];

  assign din_28_we = addr_hit[28] & reg_we & ~wr_err;
  assign din_28_wd = reg_wdata[31:0];

  assign din_29_we = addr_hit[29] & reg_we & ~wr_err;
  assign din_29_wd = reg_wdata[31:0];

  assign din_30_we = addr_hit[30] & reg_we & ~wr_err;
  assign din_30_wd = reg_wdata[31:0];

  assign din_31_we = addr_hit[31] & reg_we & ~wr_err;
  assign din_31_wd = reg_wdata[31:0];

  assign din_32_we = addr_hit[32] & reg_we & ~wr_err;
  assign din_32_wd = reg_wdata[31:0];

  assign din_33_we = addr_hit[33] & reg_we & ~wr_err;
  assign din_33_wd = reg_wdata[31:0];

  assign din_34_we = addr_hit[34] & reg_we & ~wr_err;
  assign din_34_wd = reg_wdata[31:0];

  assign din_35_we = addr_hit[35] & reg_we & ~wr_err;
  assign din_35_wd = reg_wdata[31:0];

  assign din_36_we = addr_hit[36] & reg_we & ~wr_err;
  assign din_36_wd = reg_wdata[31:0];

  assign din_37_we = addr_hit[37] & reg_we & ~wr_err;
  assign din_37_wd = reg_wdata[31:0];

  assign din_38_we = addr_hit[38] & reg_we & ~wr_err;
  assign din_38_wd = reg_wdata[31:0];

  assign din_39_we = addr_hit[39] & reg_we & ~wr_err;
  assign din_39_wd = reg_wdata[31:0];

  assign din_40_we = addr_hit[40] & reg_we & ~wr_err;
  assign din_40_wd = reg_wdata[31:0];

  assign din_41_we = addr_hit[41] & reg_we & ~wr_err;
  assign din_41_wd = reg_wdata[31:0];

  assign din_42_we = addr_hit[42] & reg_we & ~wr_err;
  assign din_42_wd = reg_wdata[31:0];

  assign din_43_we = addr_hit[43] & reg_we & ~wr_err;
  assign din_43_wd = reg_wdata[31:0];

  assign din_44_we = addr_hit[44] & reg_we & ~wr_err;
  assign din_44_wd = reg_wdata[31:0];

  assign din_45_we = addr_hit[45] & reg_we & ~wr_err;
  assign din_45_wd = reg_wdata[31:0];

  assign din_46_we = addr_hit[46] & reg_we & ~wr_err;
  assign din_46_wd = reg_wdata[31:0];

  assign din_47_we = addr_hit[47] & reg_we & ~wr_err;
  assign din_47_wd = reg_wdata[31:0];

  assign din_48_we = addr_hit[48] & reg_we & ~wr_err;
  assign din_48_wd = reg_wdata[31:0];

  assign din_49_we = addr_hit[49] & reg_we & ~wr_err;
  assign din_49_wd = reg_wdata[31:0];

  assign din_50_we = addr_hit[50] & reg_we & ~wr_err;
  assign din_50_wd = reg_wdata[31:0];

  assign din_51_we = addr_hit[51] & reg_we & ~wr_err;
  assign din_51_wd = reg_wdata[31:0];

  assign din_52_we = addr_hit[52] & reg_we & ~wr_err;
  assign din_52_wd = reg_wdata[31:0];

  assign din_53_we = addr_hit[53] & reg_we & ~wr_err;
  assign din_53_wd = reg_wdata[31:0];

  assign din_54_we = addr_hit[54] & reg_we & ~wr_err;
  assign din_54_wd = reg_wdata[31:0];

  assign din_55_we = addr_hit[55] & reg_we & ~wr_err;
  assign din_55_wd = reg_wdata[31:0];

  assign din_56_we = addr_hit[56] & reg_we & ~wr_err;
  assign din_56_wd = reg_wdata[31:0];

  assign din_57_we = addr_hit[57] & reg_we & ~wr_err;
  assign din_57_wd = reg_wdata[31:0];

  assign din_58_we = addr_hit[58] & reg_we & ~wr_err;
  assign din_58_wd = reg_wdata[31:0];

  assign din_59_we = addr_hit[59] & reg_we & ~wr_err;
  assign din_59_wd = reg_wdata[31:0];

  assign din_60_we = addr_hit[60] & reg_we & ~wr_err;
  assign din_60_wd = reg_wdata[31:0];

  assign din_61_we = addr_hit[61] & reg_we & ~wr_err;
  assign din_61_wd = reg_wdata[31:0];

  assign din_62_we = addr_hit[62] & reg_we & ~wr_err;
  assign din_62_wd = reg_wdata[31:0];

  assign din_63_we = addr_hit[63] & reg_we & ~wr_err;
  assign din_63_wd = reg_wdata[31:0];

  assign din_64_we = addr_hit[64] & reg_we & ~wr_err;
  assign din_64_wd = reg_wdata[31:0];

  assign din_65_we = addr_hit[65] & reg_we & ~wr_err;
  assign din_65_wd = reg_wdata[31:0];

  assign din_66_we = addr_hit[66] & reg_we & ~wr_err;
  assign din_66_wd = reg_wdata[31:0];

  assign din_67_we = addr_hit[67] & reg_we & ~wr_err;
  assign din_67_wd = reg_wdata[31:0];

  assign din_68_we = addr_hit[68] & reg_we & ~wr_err;
  assign din_68_wd = reg_wdata[31:0];

  assign din_69_we = addr_hit[69] & reg_we & ~wr_err;
  assign din_69_wd = reg_wdata[31:0];

  assign din_70_we = addr_hit[70] & reg_we & ~wr_err;
  assign din_70_wd = reg_wdata[31:0];

  assign din_71_we = addr_hit[71] & reg_we & ~wr_err;
  assign din_71_wd = reg_wdata[31:0];

  assign din_72_we = addr_hit[72] & reg_we & ~wr_err;
  assign din_72_wd = reg_wdata[31:0];

  assign din_73_we = addr_hit[73] & reg_we & ~wr_err;
  assign din_73_wd = reg_wdata[31:0];

  assign din_74_we = addr_hit[74] & reg_we & ~wr_err;
  assign din_74_wd = reg_wdata[31:0];

  assign din_75_we = addr_hit[75] & reg_we & ~wr_err;
  assign din_75_wd = reg_wdata[31:0];

  assign din_76_we = addr_hit[76] & reg_we & ~wr_err;
  assign din_76_wd = reg_wdata[31:0];

  assign din_77_we = addr_hit[77] & reg_we & ~wr_err;
  assign din_77_wd = reg_wdata[31:0];

  assign din_78_we = addr_hit[78] & reg_we & ~wr_err;
  assign din_78_wd = reg_wdata[31:0];

  assign din_79_we = addr_hit[79] & reg_we & ~wr_err;
  assign din_79_wd = reg_wdata[31:0];

  assign din_80_we = addr_hit[80] & reg_we & ~wr_err;
  assign din_80_wd = reg_wdata[31:0];

  assign din_81_we = addr_hit[81] & reg_we & ~wr_err;
  assign din_81_wd = reg_wdata[31:0];

  assign din_82_we = addr_hit[82] & reg_we & ~wr_err;
  assign din_82_wd = reg_wdata[31:0];

  assign din_83_we = addr_hit[83] & reg_we & ~wr_err;
  assign din_83_wd = reg_wdata[31:0];

  assign din_84_we = addr_hit[84] & reg_we & ~wr_err;
  assign din_84_wd = reg_wdata[31:0];

  assign din_85_we = addr_hit[85] & reg_we & ~wr_err;
  assign din_85_wd = reg_wdata[31:0];

  assign din_86_we = addr_hit[86] & reg_we & ~wr_err;
  assign din_86_wd = reg_wdata[31:0];

  assign din_87_we = addr_hit[87] & reg_we & ~wr_err;
  assign din_87_wd = reg_wdata[31:0];

  assign din_88_we = addr_hit[88] & reg_we & ~wr_err;
  assign din_88_wd = reg_wdata[31:0];

  assign din_89_we = addr_hit[89] & reg_we & ~wr_err;
  assign din_89_wd = reg_wdata[31:0];

  assign din_90_we = addr_hit[90] & reg_we & ~wr_err;
  assign din_90_wd = reg_wdata[31:0];

  assign din_91_we = addr_hit[91] & reg_we & ~wr_err;
  assign din_91_wd = reg_wdata[31:0];

  assign din_92_we = addr_hit[92] & reg_we & ~wr_err;
  assign din_92_wd = reg_wdata[31:0];

  assign din_93_we = addr_hit[93] & reg_we & ~wr_err;
  assign din_93_wd = reg_wdata[31:0];

  assign din_94_we = addr_hit[94] & reg_we & ~wr_err;
  assign din_94_wd = reg_wdata[31:0];

  assign din_95_we = addr_hit[95] & reg_we & ~wr_err;
  assign din_95_wd = reg_wdata[31:0];

  assign din_96_we = addr_hit[96] & reg_we & ~wr_err;
  assign din_96_wd = reg_wdata[31:0];

  assign din_97_we = addr_hit[97] & reg_we & ~wr_err;
  assign din_97_wd = reg_wdata[31:0];

  assign din_98_we = addr_hit[98] & reg_we & ~wr_err;
  assign din_98_wd = reg_wdata[31:0];

  assign din_99_we = addr_hit[99] & reg_we & ~wr_err;
  assign din_99_wd = reg_wdata[31:0];

  assign din_100_we = addr_hit[100] & reg_we & ~wr_err;
  assign din_100_wd = reg_wdata[31:0];

  assign din_101_we = addr_hit[101] & reg_we & ~wr_err;
  assign din_101_wd = reg_wdata[31:0];

  assign din_102_we = addr_hit[102] & reg_we & ~wr_err;
  assign din_102_wd = reg_wdata[31:0];

  assign din_103_we = addr_hit[103] & reg_we & ~wr_err;
  assign din_103_wd = reg_wdata[31:0];

  assign din_104_we = addr_hit[104] & reg_we & ~wr_err;
  assign din_104_wd = reg_wdata[31:0];

  assign din_105_we = addr_hit[105] & reg_we & ~wr_err;
  assign din_105_wd = reg_wdata[31:0];

  assign din_106_we = addr_hit[106] & reg_we & ~wr_err;
  assign din_106_wd = reg_wdata[31:0];

  assign din_107_we = addr_hit[107] & reg_we & ~wr_err;
  assign din_107_wd = reg_wdata[31:0];

  assign din_108_we = addr_hit[108] & reg_we & ~wr_err;
  assign din_108_wd = reg_wdata[31:0];

  assign din_109_we = addr_hit[109] & reg_we & ~wr_err;
  assign din_109_wd = reg_wdata[31:0];

  assign din_110_we = addr_hit[110] & reg_we & ~wr_err;
  assign din_110_wd = reg_wdata[31:0];

  assign din_111_we = addr_hit[111] & reg_we & ~wr_err;
  assign din_111_wd = reg_wdata[31:0];

  assign din_112_we = addr_hit[112] & reg_we & ~wr_err;
  assign din_112_wd = reg_wdata[31:0];

  assign din_113_we = addr_hit[113] & reg_we & ~wr_err;
  assign din_113_wd = reg_wdata[31:0];

  assign din_114_we = addr_hit[114] & reg_we & ~wr_err;
  assign din_114_wd = reg_wdata[31:0];

  assign din_115_we = addr_hit[115] & reg_we & ~wr_err;
  assign din_115_wd = reg_wdata[31:0];

  assign din_116_we = addr_hit[116] & reg_we & ~wr_err;
  assign din_116_wd = reg_wdata[31:0];

  assign din_117_we = addr_hit[117] & reg_we & ~wr_err;
  assign din_117_wd = reg_wdata[31:0];

  assign din_118_we = addr_hit[118] & reg_we & ~wr_err;
  assign din_118_wd = reg_wdata[31:0];

  assign din_119_we = addr_hit[119] & reg_we & ~wr_err;
  assign din_119_wd = reg_wdata[31:0];

  assign din_120_we = addr_hit[120] & reg_we & ~wr_err;
  assign din_120_wd = reg_wdata[31:0];

  assign din_121_we = addr_hit[121] & reg_we & ~wr_err;
  assign din_121_wd = reg_wdata[31:0];

  assign din_122_we = addr_hit[122] & reg_we & ~wr_err;
  assign din_122_wd = reg_wdata[31:0];

  assign din_123_we = addr_hit[123] & reg_we & ~wr_err;
  assign din_123_wd = reg_wdata[31:0];

  assign din_124_we = addr_hit[124] & reg_we & ~wr_err;
  assign din_124_wd = reg_wdata[31:0];

  assign din_125_we = addr_hit[125] & reg_we & ~wr_err;
  assign din_125_wd = reg_wdata[31:0];

  assign din_126_we = addr_hit[126] & reg_we & ~wr_err;
  assign din_126_wd = reg_wdata[31:0];

  assign din_127_we = addr_hit[127] & reg_we & ~wr_err;
  assign din_127_wd = reg_wdata[31:0];

  assign dout_0_re = addr_hit[128] && reg_re;

  assign dout_1_re = addr_hit[129] && reg_re;

  assign dout_2_re = addr_hit[130] && reg_re;

  assign dout_3_re = addr_hit[131] && reg_re;

  assign dout_4_re = addr_hit[132] && reg_re;

  assign dout_5_re = addr_hit[133] && reg_re;

  assign dout_6_re = addr_hit[134] && reg_re;

  assign dout_7_re = addr_hit[135] && reg_re;

  assign dout_8_re = addr_hit[136] && reg_re;

  assign dout_9_re = addr_hit[137] && reg_re;

  assign dout_10_re = addr_hit[138] && reg_re;

  assign dout_11_re = addr_hit[139] && reg_re;

  assign dout_12_re = addr_hit[140] && reg_re;

  assign dout_13_re = addr_hit[141] && reg_re;

  assign dout_14_re = addr_hit[142] && reg_re;

  assign dout_15_re = addr_hit[143] && reg_re;

  assign dout_16_re = addr_hit[144] && reg_re;

  assign dout_17_re = addr_hit[145] && reg_re;

  assign dout_18_re = addr_hit[146] && reg_re;

  assign dout_19_re = addr_hit[147] && reg_re;

  assign dout_20_re = addr_hit[148] && reg_re;

  assign dout_21_re = addr_hit[149] && reg_re;

  assign dout_22_re = addr_hit[150] && reg_re;

  assign dout_23_re = addr_hit[151] && reg_re;

  assign dout_24_re = addr_hit[152] && reg_re;

  assign dout_25_re = addr_hit[153] && reg_re;

  assign dout_26_re = addr_hit[154] && reg_re;

  assign dout_27_re = addr_hit[155] && reg_re;

  assign dout_28_re = addr_hit[156] && reg_re;

  assign dout_29_re = addr_hit[157] && reg_re;

  assign dout_30_re = addr_hit[158] && reg_re;

  assign dout_31_re = addr_hit[159] && reg_re;

  assign dout_32_re = addr_hit[160] && reg_re;

  assign dout_33_re = addr_hit[161] && reg_re;

  assign dout_34_re = addr_hit[162] && reg_re;

  assign dout_35_re = addr_hit[163] && reg_re;

  assign dout_36_re = addr_hit[164] && reg_re;

  assign dout_37_re = addr_hit[165] && reg_re;

  assign dout_38_re = addr_hit[166] && reg_re;

  assign dout_39_re = addr_hit[167] && reg_re;

  assign dout_40_re = addr_hit[168] && reg_re;

  assign dout_41_re = addr_hit[169] && reg_re;

  assign dout_42_re = addr_hit[170] && reg_re;

  assign dout_43_re = addr_hit[171] && reg_re;

  assign dout_44_re = addr_hit[172] && reg_re;

  assign dout_45_re = addr_hit[173] && reg_re;

  assign dout_46_re = addr_hit[174] && reg_re;

  assign dout_47_re = addr_hit[175] && reg_re;

  assign dout_48_re = addr_hit[176] && reg_re;

  assign dout_49_re = addr_hit[177] && reg_re;

  assign dout_50_re = addr_hit[178] && reg_re;

  assign dout_51_re = addr_hit[179] && reg_re;

  assign dout_52_re = addr_hit[180] && reg_re;

  assign dout_53_re = addr_hit[181] && reg_re;

  assign dout_54_re = addr_hit[182] && reg_re;

  assign dout_55_re = addr_hit[183] && reg_re;

  assign dout_56_re = addr_hit[184] && reg_re;

  assign dout_57_re = addr_hit[185] && reg_re;

  assign dout_58_re = addr_hit[186] && reg_re;

  assign dout_59_re = addr_hit[187] && reg_re;

  assign dout_60_re = addr_hit[188] && reg_re;

  assign dout_61_re = addr_hit[189] && reg_re;

  assign dout_62_re = addr_hit[190] && reg_re;

  assign dout_63_re = addr_hit[191] && reg_re;

  assign dout_64_re = addr_hit[192] && reg_re;

  assign dout_65_re = addr_hit[193] && reg_re;

  assign dout_66_re = addr_hit[194] && reg_re;

  assign dout_67_re = addr_hit[195] && reg_re;

  assign dout_68_re = addr_hit[196] && reg_re;

  assign dout_69_re = addr_hit[197] && reg_re;

  assign dout_70_re = addr_hit[198] && reg_re;

  assign dout_71_re = addr_hit[199] && reg_re;

  assign dout_72_re = addr_hit[200] && reg_re;

  assign dout_73_re = addr_hit[201] && reg_re;

  assign dout_74_re = addr_hit[202] && reg_re;

  assign dout_75_re = addr_hit[203] && reg_re;

  assign dout_76_re = addr_hit[204] && reg_re;

  assign dout_77_re = addr_hit[205] && reg_re;

  assign dout_78_re = addr_hit[206] && reg_re;

  assign dout_79_re = addr_hit[207] && reg_re;

  assign dout_80_re = addr_hit[208] && reg_re;

  assign dout_81_re = addr_hit[209] && reg_re;

  assign dout_82_re = addr_hit[210] && reg_re;

  assign dout_83_re = addr_hit[211] && reg_re;

  assign dout_84_re = addr_hit[212] && reg_re;

  assign dout_85_re = addr_hit[213] && reg_re;

  assign dout_86_re = addr_hit[214] && reg_re;

  assign dout_87_re = addr_hit[215] && reg_re;

  assign dout_88_re = addr_hit[216] && reg_re;

  assign dout_89_re = addr_hit[217] && reg_re;

  assign dout_90_re = addr_hit[218] && reg_re;

  assign dout_91_re = addr_hit[219] && reg_re;

  assign dout_92_re = addr_hit[220] && reg_re;

  assign dout_93_re = addr_hit[221] && reg_re;

  assign dout_94_re = addr_hit[222] && reg_re;

  assign dout_95_re = addr_hit[223] && reg_re;

  assign dout_96_re = addr_hit[224] && reg_re;

  assign dout_97_re = addr_hit[225] && reg_re;

  assign dout_98_re = addr_hit[226] && reg_re;

  assign dout_99_re = addr_hit[227] && reg_re;

  assign dout_100_re = addr_hit[228] && reg_re;

  assign dout_101_re = addr_hit[229] && reg_re;

  assign dout_102_re = addr_hit[230] && reg_re;

  assign dout_103_re = addr_hit[231] && reg_re;

  assign dout_104_re = addr_hit[232] && reg_re;

  assign dout_105_re = addr_hit[233] && reg_re;

  assign dout_106_re = addr_hit[234] && reg_re;

  assign dout_107_re = addr_hit[235] && reg_re;

  assign dout_108_re = addr_hit[236] && reg_re;

  assign dout_109_re = addr_hit[237] && reg_re;

  assign dout_110_re = addr_hit[238] && reg_re;

  assign dout_111_re = addr_hit[239] && reg_re;

  assign dout_112_re = addr_hit[240] && reg_re;

  assign dout_113_re = addr_hit[241] && reg_re;

  assign dout_114_re = addr_hit[242] && reg_re;

  assign dout_115_re = addr_hit[243] && reg_re;

  assign dout_116_re = addr_hit[244] && reg_re;

  assign dout_117_re = addr_hit[245] && reg_re;

  assign dout_118_re = addr_hit[246] && reg_re;

  assign dout_119_re = addr_hit[247] && reg_re;

  assign dout_120_re = addr_hit[248] && reg_re;

  assign dout_121_re = addr_hit[249] && reg_re;

  assign dout_122_re = addr_hit[250] && reg_re;

  assign dout_123_re = addr_hit[251] && reg_re;

  assign dout_124_re = addr_hit[252] && reg_re;

  assign dout_125_re = addr_hit[253] && reg_re;

  assign dout_126_re = addr_hit[254] && reg_re;

  assign dout_127_re = addr_hit[255] && reg_re;

  assign ctrl_load_a_f_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_load_a_f_wd = reg_wdata[0];

  assign ctrl_load_a_i_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_load_a_i_wd = reg_wdata[1];

  assign ctrl_load_b_f_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_load_b_f_wd = reg_wdata[2];

  assign ctrl_load_b_i_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_load_b_i_wd = reg_wdata[3];

  assign ctrl_read_a_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_read_a_wd = reg_wdata[4];

  assign ctrl_read_b_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_read_b_wd = reg_wdata[5];

  assign ctrl_start_ab_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_start_ab_wd = reg_wdata[6];

  assign ctrl_start_ntt_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_start_ntt_wd = reg_wdata[7];

  assign ctrl_start_pwm_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_start_pwm_wd = reg_wdata[8];

  assign ctrl_start_intt_we = addr_hit[256] & reg_we & ~wr_err;
  assign ctrl_start_intt_wd = reg_wdata[9];

  assign status_re = addr_hit[257] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[94]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[96]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[98]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[99]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[100]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[101]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[102]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[103]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[104]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[105]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[106]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[107]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[108]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[109]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[110]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[111]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[112]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[113]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[114]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[115]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[116]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[117]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[118]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[119]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[120]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[121]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[122]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[123]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[124]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[125]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[126]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[127]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[128]: begin
        reg_rdata_next[31:0] = dout_0_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[31:0] = dout_1_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[31:0] = dout_2_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[31:0] = dout_3_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[31:0] = dout_4_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[31:0] = dout_5_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[31:0] = dout_6_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[31:0] = dout_7_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[31:0] = dout_8_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[31:0] = dout_9_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[31:0] = dout_10_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[31:0] = dout_11_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[31:0] = dout_12_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[31:0] = dout_13_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[31:0] = dout_14_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[31:0] = dout_15_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[31:0] = dout_16_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[31:0] = dout_17_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[31:0] = dout_18_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[31:0] = dout_19_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[31:0] = dout_20_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[31:0] = dout_21_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[31:0] = dout_22_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[31:0] = dout_23_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[31:0] = dout_24_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[31:0] = dout_25_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[31:0] = dout_26_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = dout_27_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[31:0] = dout_28_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = dout_29_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[31:0] = dout_30_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[31:0] = dout_31_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[31:0] = dout_32_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[31:0] = dout_33_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[31:0] = dout_34_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[31:0] = dout_35_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[31:0] = dout_36_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[31:0] = dout_37_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[31:0] = dout_38_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[31:0] = dout_39_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[31:0] = dout_40_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[31:0] = dout_41_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[31:0] = dout_42_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[31:0] = dout_43_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[31:0] = dout_44_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[31:0] = dout_45_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[31:0] = dout_46_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[31:0] = dout_47_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[31:0] = dout_48_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[31:0] = dout_49_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[31:0] = dout_50_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[31:0] = dout_51_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[31:0] = dout_52_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[31:0] = dout_53_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[31:0] = dout_54_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[31:0] = dout_55_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[31:0] = dout_56_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[31:0] = dout_57_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[31:0] = dout_58_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[31:0] = dout_59_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[31:0] = dout_60_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[31:0] = dout_61_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[31:0] = dout_62_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[31:0] = dout_63_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[31:0] = dout_64_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[31:0] = dout_65_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[31:0] = dout_66_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[31:0] = dout_67_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[31:0] = dout_68_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[31:0] = dout_69_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[31:0] = dout_70_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[31:0] = dout_71_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[31:0] = dout_72_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[31:0] = dout_73_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[31:0] = dout_74_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[31:0] = dout_75_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[31:0] = dout_76_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[31:0] = dout_77_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[31:0] = dout_78_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[31:0] = dout_79_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[31:0] = dout_80_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[31:0] = dout_81_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[31:0] = dout_82_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[31:0] = dout_83_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[31:0] = dout_84_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[31:0] = dout_85_qs;
      end

      addr_hit[214]: begin
        reg_rdata_next[31:0] = dout_86_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[31:0] = dout_87_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[31:0] = dout_88_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[31:0] = dout_89_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[31:0] = dout_90_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[31:0] = dout_91_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[31:0] = dout_92_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[31:0] = dout_93_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[31:0] = dout_94_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[31:0] = dout_95_qs;
      end

      addr_hit[224]: begin
        reg_rdata_next[31:0] = dout_96_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[31:0] = dout_97_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[31:0] = dout_98_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[31:0] = dout_99_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[31:0] = dout_100_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[31:0] = dout_101_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[31:0] = dout_102_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[31:0] = dout_103_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[31:0] = dout_104_qs;
      end

      addr_hit[233]: begin
        reg_rdata_next[31:0] = dout_105_qs;
      end

      addr_hit[234]: begin
        reg_rdata_next[31:0] = dout_106_qs;
      end

      addr_hit[235]: begin
        reg_rdata_next[31:0] = dout_107_qs;
      end

      addr_hit[236]: begin
        reg_rdata_next[31:0] = dout_108_qs;
      end

      addr_hit[237]: begin
        reg_rdata_next[31:0] = dout_109_qs;
      end

      addr_hit[238]: begin
        reg_rdata_next[31:0] = dout_110_qs;
      end

      addr_hit[239]: begin
        reg_rdata_next[31:0] = dout_111_qs;
      end

      addr_hit[240]: begin
        reg_rdata_next[31:0] = dout_112_qs;
      end

      addr_hit[241]: begin
        reg_rdata_next[31:0] = dout_113_qs;
      end

      addr_hit[242]: begin
        reg_rdata_next[31:0] = dout_114_qs;
      end

      addr_hit[243]: begin
        reg_rdata_next[31:0] = dout_115_qs;
      end

      addr_hit[244]: begin
        reg_rdata_next[31:0] = dout_116_qs;
      end

      addr_hit[245]: begin
        reg_rdata_next[31:0] = dout_117_qs;
      end

      addr_hit[246]: begin
        reg_rdata_next[31:0] = dout_118_qs;
      end

      addr_hit[247]: begin
        reg_rdata_next[31:0] = dout_119_qs;
      end

      addr_hit[248]: begin
        reg_rdata_next[31:0] = dout_120_qs;
      end

      addr_hit[249]: begin
        reg_rdata_next[31:0] = dout_121_qs;
      end

      addr_hit[250]: begin
        reg_rdata_next[31:0] = dout_122_qs;
      end

      addr_hit[251]: begin
        reg_rdata_next[31:0] = dout_123_qs;
      end

      addr_hit[252]: begin
        reg_rdata_next[31:0] = dout_124_qs;
      end

      addr_hit[253]: begin
        reg_rdata_next[31:0] = dout_125_qs;
      end

      addr_hit[254]: begin
        reg_rdata_next[31:0] = dout_126_qs;
      end

      addr_hit[255]: begin
        reg_rdata_next[31:0] = dout_127_qs;
      end

      addr_hit[256]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
      end

      addr_hit[257]: begin
        reg_rdata_next[0] = status_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
